{
  "version": 3,
  "sources": [
    "pages/HomePage.js",
    "pages/AboutPage.js",
    "components/ArticlesList.js",
    "pages/ArticlesListPage.js",
    "NavBar.js",
    "pages/NotFoundPage.js",
    "components/SeccionVotos.js",
    "components/RelatedArticlesListPage.js",
    "components/CommentsList.js",
    "components/AddComentarioForm.js",
    "pages/PaginaArticulo.js",
    "pages/AdminPage.js",
    "components/Login.js",
    "components/UsersList.js",
    "components/Users.js",
    "pages/ArticlesListPageAdmin.js",
    "components/NuevoPost.js",
    "App.js",
    "reportWebVitals.js",
    "index.js"
  ],
  "names": [
    "HomePage",
    "AboutPage",
    "ArticlesList",
    "articulos",
    "tokenSesion",
    "useState",
    "borrararticulo",
    "articulo",
    "a",
    "console",
    "log",
    "fetch",
    "method",
    "body",
    "JSON",
    "stringify",
    "headers",
    "status",
    "map",
    "key",
    "className",
    "onClick",
    "nombre",
    "to",
    "titulo",
    "texto",
    "substring",
    "ArticlesListPage",
    "props",
    "todosArticulos",
    "setTodosArticulos",
    "useEffect",
    "result",
    "json",
    "responseBody",
    "fetchData",
    "NavBar",
    "e",
    "cerrarSesion",
    "NotFoundPage",
    "location",
    "useLocation",
    "pathname",
    "SeccionVotos",
    "nombreArticulo",
    "votos",
    "setInfoArticulo",
    "votarArticulo",
    "id",
    "RelatedArticlesListPage",
    "articulosRelacionados",
    "filter",
    "article",
    "CommentsList",
    "setArticulo",
    "resultado",
    "cuerpoRespuesta",
    "fetchDataArticulo",
    "comentarios",
    "comentario",
    "usuario",
    "AddComentarioForm",
    "username",
    "setUsername",
    "commentText",
    "setCommentText",
    "addComment",
    "type",
    "value",
    "onChange",
    "event",
    "target",
    "rows",
    "cols",
    "PaginaArticulo",
    "match",
    "params",
    "AdminPage",
    "Login",
    "email",
    "setEmail",
    "password",
    "setPassword",
    "setTokenSesion",
    "sessionStorage",
    "getItem",
    "tokenString",
    "getToken",
    "setToken",
    "setItem",
    "login",
    "preventDefault",
    "onSubmit",
    "htmlFor",
    "placeholder",
    "UsersList",
    "usuarios",
    "setUsuarios",
    "borrarUsuario",
    "emailUsuario",
    "fetchDataUsers",
    "nombreUsuario",
    "Users",
    "usuarioExito",
    "setUsuarioExito",
    "addUsuario",
    "required",
    "ArticlesListPageAdmin",
    "NuevoPost",
    "setTitulo",
    "setTexto",
    "addPost",
    "nombrePost",
    "replaceAll",
    "fecha",
    "Date",
    "now",
    "fechaCreacion",
    "autor",
    "App",
    "clear",
    "path",
    "component",
    "exact",
    "reportWebVitals",
    "onPerfEntry",
    "Function",
    "then",
    "getCLS",
    "getFID",
    "getFCP",
    "getLCP",
    "getTTFB",
    "ReactDOM",
    "render",
    "StrictMode",
    "document",
    "getElementById"
  ],
  "mappings": "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",
  "file": "static/js/main.94bc4933.chunk.js",
  "sourcesContent": [
    "import React from 'react';\n\nconst HomePage = () => (\n    //<> </> Shorthand de <react.Fragment> Poner dentro el contenido </react.Fragment>==> Envolvemos las líneas de código\n    // con <> para exportarlo sin tener que usar divs. De normal para exportar varios niveles se tiene que envolver en div\n    <>\n        <h1>Hola, Bienvenid@ al Blog</h1>\n        <p>Texto</p>\n        <p>Texto</p>\n        <p>Texto</p>\n    </>\n);\n\nexport default HomePage;\n",
    "import React from 'react';\n\n\nconst AboutPage = () => (\n    <>\n        <h1>Sobre mi</h1>\n        <p>Texto</p>\n        <p>Texto</p>\n        <p>Texto</p>\n    </>\n);\n\nexport default AboutPage;\n",
    "import React, {useState} from 'react';\nimport {Link} from \"react-router-dom\";\nimport {FaTimes} from \"react-icons/all\";\n\n//Nos traemos como parámetro la lista de artículos que nos manda desde la página de article listPage.\nconst ArticlesList = ({articulos, tokenSesion}) => {\n\n    const [articulo, setArticulo] = useState([]);\n\n    const borrararticulo = async (articulo) => {\n        console.log(articulo)\n        //Lllamamos a la API por post y se le dice que el cuerpo es un JSON donde se pase\n        // el nombre de uusuario y el texto del comentario y se le indican las cabeceeras.\n        const result = await fetch(`/api/borrarPost`, {\n                method: 'post',\n                body: JSON.stringify({\"nombre\": articulo}),\n                headers: {\n                    'Content-Type': 'application/json',\n                }\n            }\n        );\n\n        if (result.status === 200) {\n            console.log(\"Usuario \" + articulo + \"borrado\");\n        }\n    }\n\n    if (tokenSesion) {\n        return (\n            <>\n                {articulos.map((articulo, key) => (\n                    <div className=\"comment col media py-3\" key={key}>\n                        <div className=\"mr-3\">\n                            <button className=\"pet-delete btn btn-sm btn-danger\"\n                                    onClick={() => borrararticulo(articulo.nombre)}>\n                                {/*Importamos de la libreria react icons iconos para mejorar el aspecto de la web. En este caso la X*/}\n                                <FaTimes/>\n                            </button>\n                        </div>\n                        <Link className={\"article-list-item\"} key={key} to={`/articulo/${articulo.nombre}`} >\n                            <h3>{articulo.titulo}</h3>\n                            <p>{articulo.texto.substring(0,150)}...</p>\n                        </Link>\n                    </div>\n\n                ))}\n            </>\n\n        );\n    } else {\n        return (\n            <>\n                {/*\n        //Hacemos un map del array de artículos para sacar su título. Y Después usamos el Rotuer de React para crear\n        los links que dirigan a cada artículo\n*/}\n                {articulos.map((articulo, key) => (\n                    <Link className={\"article-list-item\"} key={key} to={`/articulo/${articulo.nombre}`} >\n                        <h3>{articulo.titulo}</h3>\n                        <p>{articulo.texto.substring(0,150)}...</p>\n                    </Link>\n                ))}\n            </>\n        )\n    }\n\n};\nexport default ArticlesList;\n",
    "import React, {useEffect, useState} from 'react';\nimport ArticlesList from \"../components/ArticlesList\";\n\n\n\nconst ArticlesListPage = (props) =>  {\n\n//Usamos React Hooks. Definimos la información del articúlo, que va a coger la información del servidor.\n// SetArcileinfo es la información con la que vamos a poblar la info del partículo y el objeto vacío que pasamos como argumento es el valor inicial de esa articleinfo antes de cargar algún dato que cambie su estado.\n//Se puede poner un valor por defecto de las propiedades que esperamos recibir en el article info\n    const [todosArticulos, setTodosArticulos] = useState([]);\n\n//Añadimos los datos redicibidos por la llamada al back usando use effect, pasando params en blanco para que se pase como argumento cualquier cosa que nos llegue.\n//Useeffect se llama continuamente cada vez que el componente se actualiza y se llama en bucle infinito si se está actualizando continuamente, para eso hay que usar sus deps usando un array\n//Si el array es vacío sólo se carga cuando se carga el componente, sólo la primera vez cuando se carga el componente,\n// en este caso artículos. Para especificar que se cargue cada vez que cambie algo, tenemos que indicar en qué fijarse\n// dentro de ese array, en este caso nos interesa la url, que es la const name que hemos sacado de los parámetros de la URL\n//Usamos setArticleInfo y le indicamos los valores.\n    useEffect(() => {\n        //Creamos una función para traernos los datos ya que use effect no podemos hacerla async\n        const fetchData = async () => {\n            //Nos traemos los datos llamando a la api y guardamos la respuesta\n            const result  = await fetch(`/api/obtenerArticulos`);\n            //Como la respuesta incluye cosas como el código de respuesta y sólo queremos el cuerpo, la guardamos en un json\n            const responseBody = await result.json();\n            setTodosArticulos(responseBody);\n\n        }\n        //Llamamos a la función que hemos creado\n        fetchData();\n    }, []);\n\n\n\n    return (\n        //<> </> Shorthand de <react.Fragment> Poner dentro el contenido </react.Fragment>==> Envolvemos las líneas de código\n        // con <> para exportarlo sin tener que usar divs. De normal para exportar varios niveles se tiene que envolver en div\n        <>\n            <h1>Entradas del blog</h1>\n            {/*Llamamos al componente que muestra la lista de artículos y le mandamos el fichero con los artículos como parémtro  */}\n            <ArticlesList articulos={todosArticulos} tokenSesion={props.tokenSesion}/>\n        </>\n    )\n\n};\n\n\nexport default ArticlesListPage;\n\n",
    "import React from 'react';\n//Importamos link para hacer los links en vez de con la etiqueta anchor de HTML\nimport {Link} from \"react-router-dom\";\n\n\nconst NavBar = (props) => {\n\n    if (props.tokenSesion){\n        return (\n            <nav>\n                <ul>\n                    <li>\n                        <Link to=\"/\">Home</Link>\n                    </li>\n                    <li>\n                        <Link to=\"/about\">Sobre mi</Link>\n                    </li>\n                    <li>\n                        <Link to=\"/articles-list\">Entradas del blog</Link>\n                    </li>\n                    <li>\n                        <Link to=\"/users\">Gestión Usuarios</Link>\n                    </li>\n                    <li>\n                        <Link to=\"/nuevoPost\">Nuevo post</Link>\n                    </li>\n                    <li>\n                        <Link to=\"/gestionarArticulos\">Gestionar Posts</Link>\n                    </li>\n                    <li>\n                        Bienvenid@, {props.tokenSesion}\n                    </li>\n                    <li>\n                        <button onClick={(e) => props.cerrarSesion()}>Cerrar Sesión</button>\n                    </li>\n\n                </ul>\n            </nav>\n        );\n    } else {\n\n        return (\n            <nav>\n                <ul>\n                    <li>\n                        <Link to=\"/\">Home</Link>\n                    </li>\n                    <li>\n                        <Link to=\"/about\">Sobre mi</Link>\n                    </li>\n                    <li>\n                        <Link to=\"/articles-list\">Entradas del blog</Link>\n                    </li>\n                       <li>\n                        <Link to=\"/admin\">AdminArea</Link>\n                    </li>\n\n                </ul>\n            </nav>\n        );\n\n    }\n\n}\n\n\nexport default NavBar;\n\n\n\n",
    "import React from 'react';\nimport { useLocation} from 'react-router-dom';\n\nconst NotFoundPage = () => {\n    const location = useLocation();\n    console.log(location);\n\n    return(\n        <div>\n            <h1>404: Página no encontrada</h1>\n            <h1>Recurso no encontrado en {location.pathname}</h1>\n        </div>\n    )\n};\n\nexport default NotFoundPage;\n",
    "import React from 'react';\n\n//El componente como parámetros el nombre del artículo (sacado de la URL params), votos sacado de la info del artículo\n// de la página del artículo y pasamos otro param que nos servirá para albergar los datos del body de la request\nconst SeccionVotos = ({nombreArticulo, votos, setInfoArticulo}) => {\n\n    //Hacemos una llamada post para incrementar el número de me votos de cada artículo cogiendo el nombre del artículo\n const votarArticulo = async () => {\n     const result = await fetch(`/api/articulos/${nombreArticulo}/votar`, {\n         method: 'post',\n     })\n     //Cogemos el cuerpo de la respuesta pasado a JSON\n     const body = await result.json();\n     //Ponemos la infor del artículo como el cuerpo de la respuesta\n     setInfoArticulo(body);\n }\n    //Devolvemos un botón para que llame a la función me gusta cuando se le haga click y mostramos los votos del artículo\n    return (\n        <div id={'upvotes-section'}>\n        <button onClick={() => votarArticulo()}>Me gusta</button>\n        {/*Mostramos los datos del artículo*/}\n        <p>Este artículo ha recibiddo {votos} votos</p>\n        </div>\n        );\n};\n\nexport default SeccionVotos;\n",
    "import React, {useEffect, useState} from 'react';\nimport ArticlesList from \"./ArticlesList\";\n\n\nconst RelatedArticlesListPage = ({nombre}) => {\n\n//Usamos React Hooks. Definimos la información del articúlo, que va a coger la información del servidor.\n// SetArcileinfo es la información con la que vamos a poblar la info del partículo y el objeto vacío que pasamos como argumento es el valor inicial de esa articleinfo antes de cargar algún dato que cambie su estado.\n//Se puede poner un valor por defecto de las propiedades que esperamos recibir en el article info\n    const [todosArticulos, setTodosArticulos] = useState([]);\n\n//Añadimos los datos redicibidos por la llamada al back usando use effect, pasando params en blanco para que se pase como argumento cualquier cosa que nos llegue.\n//Useeffect se llama continuamente cada vez que el componente se actualiza y se llama en bucle infinito si se está actualizando continuamente, para eso hay que usar sus deps usando un array\n//Si el array es vacío sólo se carga cuando se carga el componente, sólo la primera vez cuando se carga el componente,\n// en este caso artículos. Para especificar que se cargue cada vez que cambie algo, tenemos que indicar en qué fijarse\n// dentro de ese array, en este caso nos interesa la url, que es la const name que hemos sacado de los parámetros de la URL\n//Usamos setArticleInfo y le indicamos los valores.\n    useEffect(() => {\n        //Creamos una función para traernos los datos ya que use effect no podemos hacerla async\n        const fetchData = async () => {\n            //Nos traemos los datos llamando a la api y guardamos la respuesta\n            const result = await fetch(`/api/obtenerArticulos`);\n            //Como la respuesta incluye cosas como el código de respuesta y sólo queremos el cuerpo, la guardamos en un json\n            const responseBody = await result.json();\n            setTodosArticulos(responseBody);\n\n        }\n        //Llamamos a la función que hemos creado\n        fetchData();\n    }, []);\n\n    const articulosRelacionados = (todosArticulos.filter(article => article.nombre !== nombre));\n\n\n    return (\n        //<> </> Shorthand de <react.Fragment> Poner dentro el contenido </react.Fragment>==> Envolvemos las líneas de código\n        // con <> para exportarlo sin tener que usar divs. De normal para exportar varios niveles se tiene que envolver en div\n        <>\n            <h1>Entradas del blog</h1>\n            {/*Llamamos al componente que muestra la lista de artículos y le mandamos el fichero con los artículos como parémtro  */}\n            <ArticlesList articulos={articulosRelacionados}/>\n        </>\n    )\n\n};\n\n\nexport default RelatedArticlesListPage;\n\n",
    "import React, {useEffect, useState} from 'react'\n\n//Función que recibe los comentarios como argumentos, nos recorremos con un map un array y acada posición del array la\n// pintamos con el nombre de usuario y el texto del comentario\nconst CommentsList = ({nombre}) => {\n\n        const [articulo, setArticulo] = useState({\"comentarios\": []});\n\n\n        useEffect(() => {\n                //Creamos una función para traernos los datos ya que use effect no podemos hacerla async\n                const fetchDataArticulo = async () => {\n                        //Nos traemos los datos llamando a la api y guardamos la respuesta\n                        const resultado  = await fetch(`/api/articulo/${nombre}`);\n                        //Como la respuesta incluye cosas como el código de respuesta y sólo queremos el cuerpo, la guardamos en un json\n                        const cuerpoRespuesta = await resultado.json();\n                        setArticulo(cuerpoRespuesta);\n                }\n                //Llamamos a la función que hemos creado\n                fetchDataArticulo();\n        }, );\n\n        return (\n\n            <>\n                    {articulo.comentarios.map((comentario, key) => (\n                        <div className={\"comment\"} key={key}>\n                                <h4>{comentario.usuario}</h4>\n                                <p>{comentario.comentario}</p>\n                        </div>\n\n                    ))}\n            </>\n        );\n};\n\nexport default CommentsList;\n",
    "import React, {useState} from 'react';\n\nconst AddComentarioForm = ({nombreArticulo, setInfoArticulo}) => {\n    const [username, setUsername] = useState('');\n    const [commentText, setCommentText] = useState('');\n\n    //Función para añadir un comentario\n    const addComment = async () => {\n        //Lllamamos a la API por post y se le dice que el cuerpo es un JSON donde se pase\n        // el nombre de uusuario y el texto del comentario y se le indican las cabeceeras.\n        const result = await fetch(`/api/articulos/${nombreArticulo}/comentar`, {\n            method: 'post',\n            body: JSON.stringify({usuario: username, comentario: commentText}),\n            headers: {\n                'Content-Type': 'application/json',\n            }\n        });\n\n        //El cuerpo es el resultado pasado a json.\n        const body = await result.json();\n        setInfoArticulo(body);\n        //Se dejan en blanco nuevamente los campos del formulario\n        setUsername('');\n        setCommentText('');\n    }\n\n    return (\n        <div id={\"add-comment-form\"}>\n            <h3>Añadir un comentario</h3>\n            <label>\n                Nombre:\n                <input type={\"text\"} value={username} onChange={(event => setUsername(event.target.value))}/>\n            </label>\n            <label>\n                Comentario:\n                <textarea rows={\"4\"} cols={\"50\"} value={commentText}\n                          onChange={(event => setCommentText(event.target.value))}/>\n            </label>\n            <button onClick={() => addComment()}>Enviar comentario</button>\n        </div>\n\n    );\n}\n\nexport default AddComentarioForm;\n",
    "import React, {useEffect, useState} from 'react';\nimport NotFoundPage from \"./NotFoundPage\";\nimport SeccionVotos from \"../components/SeccionVotos\";\nimport RelatedArticlesListPage from \"../components/RelatedArticlesListPage\";\nimport CommentsList from \"../components/CommentsList\";\nimport AddComentarioForm from \"../components/AddComentarioForm\";\n\nconst PaginaArticulo = ({match}) => {\n    const nombre = match.params.nombre;\n\n    const [articulo, setArticulo] = useState({ });\n\n    useEffect(() => {\n        //Creamos una función para traernos los datos ya que use effect no podemos hacerla async\n        const fetchDataArticulo = async () => {\n            //Nos traemos los datos llamando a la api y guardamos la respuesta\n            const resultado  = await fetch(`/api/articulo/${nombre}`);\n            //Como la respuesta incluye cosas como el código de respuesta y sólo queremos el cuerpo, la guardamos en un json\n            const cuerpoRespuesta = await resultado.json();\n            setArticulo(cuerpoRespuesta);\n        }\n        //Llamamos a la función que hemos creado\n\n\n        fetchDataArticulo();\n\n\n    }, [nombre]);\n\n    if (articulo === null) return <NotFoundPage/>;\n\n\n    return(\n        <>\n                <h1>{articulo.titulo}</h1>\n                <SeccionVotos nombreArticulo={nombre} votos={articulo.votos} setInfoArticulo={setArticulo}/>\n                <p>{articulo.texto}</p>\n                <h3>Otros artículos:</h3>\n                <RelatedArticlesListPage nombre={nombre}/>\n                 <CommentsList nombre={nombre}/>\n            <AddComentarioForm nombreArticulo={nombre} setInfoArticulo={setArticulo} />\n        </>\n    );\n}\n\nexport default PaginaArticulo;\n",
    "import React from 'react';\n\n\n\nconst AdminPage = () => (\n    <>\n        <h1>Pagina de administracion</h1>\n\n    </>\n);\n\nexport default AdminPage;\n",
    "import React, {useState} from 'react';\nimport AdminPage from \"../pages/AdminPage\";\nimport 'bootstrap';\n\n//Recogemos en propiedades la función setToken\nconst Login = (props) => {\n\n\n    //Guardamos en los estados el email y la contraseña junto con el token que vamos a utilizar para comprobar la sesión\n    const [email, setEmail] = useState('');\n    const [password, setPassword] = useState('');\n    //Guardamos el token de sesión en la memoria\n    const [tokenSesion, setTokenSesion] = useState();\n\n\n    const getToken = () => {\n        if (sessionStorage.getItem('token')) {\n            const tokenString = sessionStorage.getItem('token');\n            setTokenSesion(tokenString);\n        }\n    };\n\n\n\n    //Si hay token, entendemos que se ha iniciado sesión sin cerrar y por tanto puede ir a la página de administración sin problema\n    if (tokenSesion) return <AdminPage/>\n    getToken();\n\n\n    //Nos traemos el cuerpo de la respuesta, que es el nombre del usuario y lo ponemos como valor del token que dirá si tenemos la sesión abierta o no\n    const setToken = (cuerpoRespuesta) => {\n        setTokenSesion(cuerpoRespuesta);\n        sessionStorage.setItem('token',cuerpoRespuesta);\n\n    }\n\n\n    //Función para añadir un comentario\n    const login = async e => {\n        e.preventDefault();\n        //Lllamamos a la API por post y se le dice que el cuerpo es un JSON donde se pase\n        // el nombre de uusuario y el texto del comentario y se le indican las cabeceeras.\n        const result = await fetch(`/api/login`, {\n            method: 'post',\n            body: JSON.stringify({email: email, password: password}),\n            headers: {\n                'Content-Type': 'application/json',\n            }\n        }\n        );\n        const cuerpoRespuesta = await result.json();\n\n        //Si el login es correcto que recibimos un status 200 ponemos el token y lo pasamos a la app por propiedades para\n        // que modifique la barra de navegación\n        if (result.status === 200) {\n            console.log(\"Token:\" + cuerpoRespuesta);\n           setToken(cuerpoRespuesta);\n           props.setTokenSesion();\n        }\n\n    };\n\n\n    return (\n        <div id={\"add-comment-form\"} className={\"login-wrapper\"}>\n            <form onSubmit={login}>\n                <h3>Login</h3>\n                <label htmlFor={\"email\"}>\n                    Nombre:\n                    <input id={\"email\"} type={\"text\"} value={email} placeholder={\"Introducir email\"}\n                           onChange={(event => setEmail(event.target.value))}/>\n                </label>\n                <label htmlFor={\"password\"}>\n                    Contraseña:\n                    <input id={\"password\"} rows={\"4\"} cols={\"50\"} value={password} type={\"password\"}\n                           placeholder={\"Introducir contraseña\"}\n                           onChange={(event => setPassword(event.target.value))}/>\n                </label>\n                <button type={\"submit\"}>Iniciar sesión</button>\n            </form>\n        </div>\n    );\n}\nexport default Login;\n",
    "import React, {useEffect, useState} from 'react'\nimport {FaTimes} from \"react-icons/all\";\n\n//Función que recibe los comentarios como argumentos, nos recorremos con un map un array y acada posición del array la\n// pintamos con el nombre de usuario y el texto del comentario\nconst UsersList = () => {\n\n        const [usuarios, setUsuarios] = useState([]);\n\n\n\n        const borrarUsuario = async (emailUsuario) => {\n                console.log(emailUsuario)\n                        //Lllamamos a la API por post y se le dice que el cuerpo es un JSON donde se pase\n                        // el nombre de uusuario y el texto del comentario y se le indican las cabeceeras.\n                        const result = await fetch(`/api/borrarUsuario`, {\n                                    method: 'post',\n                                    body: JSON.stringify({\"email\": emailUsuario}),\n                                    headers: {\n                                            'Content-Type': 'application/json',\n                                    }\n                            }\n                        );\n\n                        if (result.status === 200) {\n                                console.log(\"Usuario \" + emailUsuario + \"borrado\");\n\n                        }\n\n        }\n\n\n        useEffect(() => {\n                //Creamos una función para traernos los datos ya que use effect no podemos hacerla async\n                const fetchDataUsers = async () => {\n                        //Nos traemos los datos llamando a la api y guardamos la respuesta\n                        const resultado  = await fetch(`/api/obtenenerTodosUsuarios`);\n                        //Como la respuesta incluye cosas como el código de respuesta y sólo queremos el cuerpo, la guardamos en un json\n                        const cuerpoRespuesta = await resultado.json();\n                        console.log(cuerpoRespuesta)\n                        setUsuarios(cuerpoRespuesta);\n                }\n                //Llamamos a la función que hemos creado\n                fetchDataUsers();\n        }, );\n\n        return (\n\n            <>\n                    {usuarios.map((usuario, key) => (\n                        <div className=\"comment col media py-3\" key={key}>\n                                <div className=\"mr-3\">\n                                        <button className=\"pet-delete btn btn-sm btn-danger\"\n                                                onClick={() => borrarUsuario(usuario.email)}>\n                                                {/*Importamos de la libreria react icons iconos para mejorar el aspecto de la web. En este caso la X*/}\n                                                <FaTimes/>\n                                        </button>\n\n                                </div>\n                                <h4>{usuario.nombreUsuario}</h4>\n\n\n\n                                <p>\n                                        {usuario.email}</p>\n                        </div>\n\n                    ))}\n            </>\n        );\n};\n\nexport default UsersList;\n",
    "import React, {useState} from 'react';\nimport UsersList from \"./UsersList\";\nimport NotFoundPage from \"../pages/NotFoundPage\";\n\n\n\nconst Users = (props) => {\n    const [username, setUsername] = useState('');\n    const [password, setPassword] = useState('');\n    const [email, setEmail] = useState('');\n    const [usuarioExito, setUsuarioExito] = useState('');\n\n\n    //Función para añadir un comentario\n    const addUsuario = async () => {\n        //Lllamamos a la API por post y se le dice que el cuerpo es un JSON donde se pase\n        // el nombre de uusuario y el texto del comentario y se le indican las cabeceeras.\n        const result = await fetch(`/api/nuevoUsuario`, {\n            method: 'post',\n            body: JSON.stringify({nombre: username, email: email, password: password}),\n            headers: {\n                'Content-Type': 'application/json',\n            }\n        });\n\n        //El cuerpo es el resultado pasado a json.\n        const body = await result.json();\n        if (result.status === 200) {\n            //Se dejan en blanco nuevamente los campos del formulario y se saca mensaje de Exito\n            setUsuarioExito(\"Usuario dado de alta correctamente\");\n            setUsername('');\n            setPassword('');\n            setEmail('');\n        }\n\n    }\n    if (props.tokenSesion) {\n\n    return (\n        <>\n        <form id={\"add-comment-form\"}>\n            <h3>Añadir un usuarioo</h3>\n            <div><span className={\"success text-success\"}>{usuarioExito}</span></div>\n            <label htmlFor={\"nombre\"}>\n                Nombre:\n                <input id={\"nombre\"} type={\"text\"} value={username} required onChange={(event => setUsername(event.target.value))}/>\n            </label>\n            <label htmlFor={email}>\n                Email:\n                <input id={\"email\"} type={email} value={email} required\n                          onChange={(event => setEmail(event.target.value))}/>\n            </label>\n            <label htmlFor={password}>\n                Contraseña:\n                <input id={\"password\"} value={password} required\n                       onChange={(event => setPassword(event.target.value))}/>\n            </label>\n            <button onClick={() => addUsuario()}>Crear usuario</button>\n        </form>\n                <UsersList/>\n            </>\n    );\n    } else {\n        return <NotFoundPage/>\n    }\n\n}\n\nexport default Users;\n",
    "import React, {useEffect, useState} from 'react';\nimport ArticlesList from \"../components/ArticlesList\";\nimport ArticlesListAdmin from \"../components/ArticlesListAdmin\";\nimport NotFoundPage from \"./NotFoundPage\";\n\n\n\nconst ArticlesListPageAdmin = (props) =>  {\n\n//Usamos React Hooks. Definimos la información del articúlo, que va a coger la información del servidor.\n// SetArcileinfo es la información con la que vamos a poblar la info del partículo y el objeto vacío que pasamos como argumento es el valor inicial de esa articleinfo antes de cargar algún dato que cambie su estado.\n//Se puede poner un valor por defecto de las propiedades que esperamos recibir en el article info\n    const [todosArticulos, setTodosArticulos] = useState([]);\n\n//Añadimos los datos redicibidos por la llamada al back usando use effect, pasando params en blanco para que se pase como argumento cualquier cosa que nos llegue.\n//Useeffect se llama continuamente cada vez que el componente se actualiza y se llama en bucle infinito si se está actualizando continuamente, para eso hay que usar sus deps usando un array\n//Si el array es vacío sólo se carga cuando se carga el componente, sólo la primera vez cuando se carga el componente,\n// en este caso artículos. Para especificar que se cargue cada vez que cambie algo, tenemos que indicar en qué fijarse\n// dentro de ese array, en este caso nos interesa la url, que es la const name que hemos sacado de los parámetros de la URL\n//Usamos setArticleInfo y le indicamos los valores.\n    useEffect(() => {\n        //Creamos una función para traernos los datos ya que use effect no podemos hacerla async\n        const fetchData = async () => {\n            //Nos traemos los datos llamando a la api y guardamos la respuesta\n            const result  = await fetch(`/api/obtenerArticulos`);\n            //Como la respuesta incluye cosas como el código de respuesta y sólo queremos el cuerpo, la guardamos en un json\n            const responseBody = await result.json();\n            setTodosArticulos(responseBody);\n\n        }\n        //Llamamos a la función que hemos creado\n        fetchData();\n    }, []);\n\n\n        return (\n            //<> </> Shorthand de <react.Fragment> Poner dentro el contenido </react.Fragment>==> Envolvemos las líneas de código\n            // con <> para exportarlo sin tener que usar divs. De normal para exportar varios niveles se tiene que envolver en div\n            <>\n                <h1>Entradas del blog</h1>\n                {/*Llamamos al componente que muestra la lista de artículos y le mandamos el fichero con los artículos como parémtro  */}\n                <ArticlesList articulos={todosArticulos} tokenSesion={props.tokenSesion}/>\n            </>\n        )\n\n};\n\n\nexport default ArticlesListPageAdmin;\n\n",
    "import React, {useState} from 'react';\nimport NotFoundPage from \"../pages/NotFoundPage\";\n\n\n\n\nconst NuevoPost = (props) => {\n    const [titulo, setTitulo] = useState('');\n    const [texto, setTexto] = useState('');\n    const [usuarioExito, setUsuarioExito] = useState('');\n\n\n    //Función para añadir un comentario\n    const addPost = async (e) => {\n        e.preventDefault();\n        const nombrePost = titulo.replaceAll(\" \", \"-\");\n        const fecha = Date.now();\n        console.log(\"fecha\" + fecha + \"Y nombre post\" + nombrePost);\n        //Lllamamos a la API por post y se le dice que el cuerpo es un JSON donde se pase\n        // el nombre de uusuario y el texto del comentario y se le indican las cabeceeras.\n        const result = await fetch(`/api/articulos/nuevoArticulo`, {\n            method: 'post',\n            body: JSON.stringify({\n                nombre: nombrePost,\n                texto: texto,\n                titulo: titulo,\n                fechaCreacion: fecha,\n                autor: props.tokenSesion}),\n            headers: {\n                'Content-Type': 'application/json',\n            }\n        });\n\n        //El cuerpo es el resultado pasado a json.\n        const body = await result.json();\n        if (result.status === 200) {\n            //Se dejan en blanco nuevamente los campos del formulario y se saca mensaje de Exito\n            setUsuarioExito(\"Usuario dado de alta correctamente\");\n            setTitulo('');\n            setTexto('');\n\n        }\n\n\n    }\n    if (props.tokenSesion) {\n\n    return (\n        <>\n        <form id={\"add-comment-form\"} onSubmit={addPost}>\n            <h3>Crear un nuevo post</h3>\n            <div><span className={\"success text-success\"}>{usuarioExito}</span></div>\n            <label htmlFor={\"nombre\"}>\n                Título:\n                <input id={\"nombre\"} type={\"text\"} value={titulo} required onChange={(event => setTitulo(event.target.value))}/>\n            </label>\n            <label htmlFor={\"textoPost\"}>\n                Texto:\n                <input id={\"textoPost\"} type={\"textarea\"} value={texto} required\n                          onChange={(event => setTexto(event.target.value))}/>\n            </label>\n            <input type={\"submit\"} value={\"Crear Post\"}/>\n\n        </form>\n\n            </>\n    );\n    } else {\n        return <NotFoundPage/>\n    }\n\n}\n\nexport default NuevoPost;\n",
    "//Importamos router para traernos las dependencias de la navegación\nimport {BrowserRouter as Router, Route, Switch} from 'react-router-dom';\nimport './App.css';\nimport HomePage from \"./pages/HomePage\";\nimport AboutPage from \"./pages/AboutPage\";\nimport ArticlesListPage from \"./pages/ArticlesListPage\";\nimport NavBar from \"./NavBar\";\nimport NotFoundPage from \"./pages/NotFoundPage\";\nimport PaginaArticulo from \"./pages/PaginaArticulo\";\nimport Login from \"./components/Login\";\nimport 'bootstrap';\nimport React, {useEffect, useState} from \"react\";\nimport Users from \"./components/Users\";\nimport ArticlesListPageAdmin from \"./pages/ArticlesListPageAdmin\";\nimport NuevoPost from \"./components/NuevoPost\";\n\n\nfunction App() {\n    //Creamos una constante para el token y el set token que nos comprueba si la sesión está abierta\n    const [tokenSesion, setTokenSesion] = useState(null);\n\n    //Monitorizamos cada vez que el toquen de la sesión cambie y lo cogemos de la sesión del navegador de session storage\n    useEffect(() => {\n        const getToken = () => {\n            if (sessionStorage.getItem('token')) {\n                const tokenString = sessionStorage.getItem('token');\n                setTokenSesion(tokenString);\n            }\n        };\n        getToken();\n        console.log(\"Usuario logado\" + tokenSesion);\n    }, [tokenSesion]);\n\n    //Función para cerrar la sesión desde el session storage del navegador y poner el token de la sesión a null.\n    // Esta función la pasamos a la navBar\n    const cerrarSesion = () => {\n        sessionStorage.clear();\n        setTokenSesion(null);\n    };\n\n    return (\n        //Envolvemos el código dentro del router component\n        //Article:name --> Aquí recogemos el parámetro de la URL para poderlo utilizar en la página en cuestión\n        <Router>\n            <div className=\"App\">\n                {/*Cargamos el componente de la barra de navegación encima del cuerpo de la página ya que queremos que se cargue en todas las páginas*/}\n                <NavBar tokenSesion={tokenSesion} cerrarSesion={cerrarSesion}/>\n                <div id=\"page-body\">\n\n                    {/*Usamos Switch para decirle que una vez encuentre uno de los path no siga mostrando los siguientes. Aquí es importante el orden.*/}\n                    <Switch>\n                        {/*Le decimos que la home debe abrir el componente de hompage usando exact le decimos que sólo queremos que cargue\n      el componente cuando sea esa ruta y si no, que no cargue nada. */}\n                        <Route path=\"/\" component={HomePage} exact/>\n                        <Route path=\"/about\" component={AboutPage} exact/>\n                        <Route\n                            path=\"/articles-list\"\n                            component={() => <ArticlesListPage tokenSesion={tokenSesion}/>}\n                            exact/>\n                        {/*Usamos :name donde pasamos un parámetro en el navegador que se pasa al componente*/}\n                        <Route path=\"/articulo/:nombre\" component={PaginaArticulo}/>\n                        {/*      Pasamos como componente la función de set token para que nos vuelva a la App el token en cuanto iniciemos sesión. De esta forma capturamos el estado de la sesión\n      lo pasamos a la barra de navegación como props en el caso que no estuviera el usuario logado.    */}\n                        <Route path=\"/admin\" component={() => <Login setTokenSesion={setTokenSesion}/>}/>\n                        <Route path=\"/users\" component={() => <Users tokenSesion={tokenSesion}/>}/>\n                        <Route path=\"/gestionarPost\"\n                               component={() => <ArticlesListPageAdmin tokenSesion={tokenSesion}/>}/>\n                        <Route path=\"/nuevoPost\" component={() => <NuevoPost tokenSesion={tokenSesion}/>}/>\n                        <Route component={NotFoundPage}/>\n                    </Switch>\n                </div>\n            </div>\n        </Router>\n    );\n}\n\nexport default App;\n",
    "const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n",
    "import 'whatwg-fetch';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"
  ],
  "sourceRoot": ""
}
