{
  "version": 3,
  "sources": [
    "img/reactAnimado.gif",
    "components/ArticlesList.js",
    "pages/ArticlesListPageReducido.js",
    "pages/HomePage.js",
    "pages/AboutPage.js",
    "pages/ArticlesListPage.js",
    "NavBar.js",
    "pages/NotFoundPage.js",
    "components/SeccionVotos.js",
    "components/RelatedArticlesListPage.js",
    "components/CommentsList.js",
    "components/AddComentarioForm.js",
    "pages/PaginaArticulo.js",
    "components/Login.js",
    "components/UsersList.js",
    "components/Users.js",
    "components/NuevoPost.js",
    "pages/ArticlesListPageAdmin.js",
    "App.js",
    "reportWebVitals.js",
    "index.js"
  ],
  "names": [
    "ArticlesList",
    "articulos",
    "tokenSesion",
    "setusuarioExito",
    "useState",
    "articulo",
    "borrararticulo",
    "nombreArticulo",
    "a",
    "fetch",
    "method",
    "body",
    "JSON",
    "stringify",
    "headers",
    "status",
    "console",
    "log",
    "className",
    "map",
    "key",
    "onClick",
    "nombre",
    "aria-label",
    "to",
    "titulo",
    "texto",
    "substring",
    "ArticlesListPage",
    "props",
    "todosArticulos",
    "setTodosArticulos",
    "usuarioExito",
    "useEffect",
    "result",
    "json",
    "responseBody",
    "fetchData",
    "HomePage",
    "src",
    "logoReact",
    "width",
    "height",
    "alt",
    "ArticlesListPageReducido",
    "AboutPage",
    "NavBar",
    "href",
    "e",
    "cerrarSesion",
    "id",
    "NotFoundPage",
    "location",
    "useLocation",
    "pathname",
    "SeccionVotos",
    "votos",
    "setInfoArticulo",
    "votarArticulo",
    "RelatedArticlesListPage",
    "articulosRelacionados",
    "filter",
    "article",
    "CommentsList",
    "setArticulo",
    "resultado",
    "cuerpoRespuesta",
    "fetchDataArticulo",
    "comentarios",
    "comentario",
    "usuario",
    "AddComentarioForm",
    "interruptorForm",
    "mostrarForm",
    "username",
    "setUsername",
    "commentText",
    "setCommentText",
    "css",
    "addComment",
    "preventDefault",
    "onSubmit",
    "htmlFor",
    "type",
    "required",
    "value",
    "onChange",
    "event",
    "target",
    "rows",
    "cols",
    "PaginaArticulo",
    "match",
    "params",
    "setMostrarForm",
    "numComentarios",
    "length",
    "autor",
    "date",
    "Date",
    "fechaCreacion",
    "parse",
    "format",
    "Login",
    "email",
    "setEmail",
    "password",
    "setPassword",
    "setTokenSesion",
    "mensajeError",
    "setMensajeError",
    "sessionStorage",
    "getItem",
    "tokenString",
    "getToken",
    "setToken",
    "setItem",
    "login",
    "role",
    "name",
    "placeholder",
    "UsersList",
    "usuarios",
    "setUsuarios",
    "borrarUsuario",
    "emailUsuario",
    "setUsuarioExito",
    "fetchDataUsers",
    "nombreUsuario",
    "Users",
    "addUsuario",
    "NuevoPost",
    "setTitulo",
    "setTexto",
    "addPost",
    "nombrePost",
    "replaceAll",
    "fecha",
    "now",
    "ArticlesListPageAdmin",
    "App",
    "clear",
    "path",
    "component",
    "exact",
    "reportWebVitals",
    "onPerfEntry",
    "Function",
    "then",
    "getCLS",
    "getFID",
    "getFCP",
    "getLCP",
    "getTTFB",
    "ReactDOM",
    "render",
    "StrictMode",
    "document",
    "getElementById"
  ],
  "mappings": "wPAAe,G,OAAA,IAA0B,0C,gCCuE1BA,EAlEM,SAAC,GAA+C,IAA9CC,EAA6C,EAA7CA,UAAWC,EAAkC,EAAlCA,YAAaC,EAAqB,EAArBA,gBAAqB,EAEhCC,mBAAS,IAFuB,mBAEzDC,EAFyD,KAI1DC,GAJ0D,KAI5C,uCAAG,WAAOC,GAAP,SAAAC,EAAA,sEAGEC,MAAM,kBAAmB,CACtCC,OAAQ,OACRC,KAAMC,KAAKC,UAAU,CAAC,OAAUN,IAChCO,QAAS,CACL,eAAgB,sBAPT,OAYG,MAZH,OAYRC,SACPC,QAAQC,IAAI,WAAaZ,EAAW,WACpCF,EAAgB,sCAdD,2CAAH,uDAkBpB,OAAID,EAEI,mCACI,qBAAKgB,UAAW,YAAhB,SACCjB,EAAUkB,KAAI,SAACd,EAAUe,GAAX,OACX,sBAAKF,UAAU,iBAAf,UACI,qBAAKA,UAAU,OAAf,SACI,wBAAQA,UAAU,wBACVG,QAAS,kBAAMf,EAAeD,EAASiB,SAASC,aAAY,qBADpE,SAGI,cAAC,IAAD,QAGR,8BACA,eAAC,IAAD,CAAgBC,GAAE,oBAAenB,EAASiB,QAA1C,UACI,6BAAKjB,EAASoB,SACd,8BAAIpB,EAASqB,MAAMC,UAAU,EAAE,IAA/B,WAFOP,OATsBA,UAuB7C,mCAKKnB,EAAUkB,KAAI,SAACd,EAAUe,GAAX,OACX,eAAC,IAAD,CAAMF,UAAW,oBAA+BM,GAAE,oBAAenB,EAASiB,QAA1E,UACI,6BAAKjB,EAASoB,SACd,8BAAIpB,EAASqB,MAAMC,UAAU,EAAE,KAA/B,WAFuCP,SCRhDQ,EAhDU,SAACC,GAAW,MAKWzB,mBAAS,IALpB,mBAK1B0B,EAL0B,KAKVC,EALU,OAMO3B,mBAAS,IANhB,mBAM1B4B,EAN0B,KAMZ7B,EANY,KA8BjC,OAhBA8B,qBAAU,YAES,uCAAG,8BAAAzB,EAAA,sEAEQC,MAAM,iCAFd,cAERyB,EAFQ,gBAIaA,EAAOC,OAJpB,OAIRC,EAJQ,OAKdL,EAAkBK,GALJ,2CAAH,qDASfC,MAQA,aAFA,CAEA,qBACI,sBAAKnB,UAAW,YAAhB,UACA,qBAAKA,UAAW,KAAhB,2CACI,mBAAGA,UAAW,uBAAd,SAAuCc,IAC3C,uBAGA,cAAC,EAAD,CAAc/B,UAAW6B,EAAgB5B,YAAa2B,EAAM3B,YAAaC,gBAAiBA,UCnBvFmC,EAtBE,WAEb,OAII,aAFA,CAEA,OAAKpB,UAAW,YAAhB,SACI,sBAAKA,UAAU,MAAf,UACI,qBAAKA,UAAU,sDAAf,SACI,uDAAyB,0CACrB,qBAAKqB,IAAKC,EAAWC,MAAO,IAAKC,OAAQ,IAAKC,IAAK,eACnD,4EAER,qBAAKzB,UAAU,QAAf,SACI,cAAC0B,EAAD,YCNLC,EATG,kBACd,qCACI,0CACA,sCACA,sCACA,0CC6COjB,EAhDU,SAACC,GAAW,MAKWzB,mBAAS,IALpB,mBAK1B0B,EAL0B,KAKVC,EALU,OAMO3B,mBAAS,IANhB,mBAM1B4B,EAN0B,KAMZ7B,EANY,KA8BjC,OAhBA8B,qBAAU,YAES,uCAAG,8BAAAzB,EAAA,sEAEQC,MAAM,yBAFd,cAERyB,EAFQ,gBAIaA,EAAOC,OAJpB,OAIRC,EAJQ,OAKdL,EAAkBK,GALJ,2CAAH,qDASfC,MAQA,aAFA,CAEA,qBACI,sBAAKnB,UAAW,YAAhB,UACA,qBAAKA,UAAW,KAAhB,+BACI,mBAAGA,UAAW,uBAAd,SAAuCc,IAC3C,uBAGA,cAAC,EAAD,CAAc/B,UAAW6B,EAAgB5B,YAAa2B,EAAM3B,YAAaC,gBAAiBA,U,kBCoBvF2C,EA3DA,SAACjB,GAEZ,OAAIA,EAAM3B,YAEF,qBAAKgB,UAAU,wDAAf,SACI,sBAAKA,UAAW,YAAhB,UACI,sBAAKA,UAAW,gBAAhB,UAAiC,cAAC,IAAD,IAAjC,4BACA,qBAAIA,UAAU,wBAAd,UACI,oBAAIA,UAAU,oBAAoB6B,KAAK,WAAvC,SACI,cAAC,IAAD,CAAMvB,GAAG,IAAT,oBAEJ,oBAAIN,UAAU,oBAAoB6B,KAAK,WAAvC,SACI,cAAC,IAAD,CAAMvB,GAAG,iBAAT,iCAEJ,oBAAIN,UAAU,oBAAoB6B,KAAK,WAAvC,SACI,cAAC,IAAD,CAAMvB,GAAG,SAAT,mCAEJ,oBAAIN,UAAU,oBAAoB6B,KAAK,WAAvC,SACI,cAAC,IAAD,CAAMvB,GAAG,aAAT,0BAEJ,qBAAIN,UAAU,oBAAoB6B,KAAK,WAAvC,yBACiBlB,EAAM3B,eAGvB,sBAAMgB,UAAU,cAAhB,SACI,yBAAQA,UAAU,wBAAwBG,QAAS,SAAC2B,GAAD,OAAOnB,EAAMoB,gBAAhE,UAAgF,cAAC,IAAD,CAAU/B,UAAW,eAArG,iCAUhB,qBAAKgC,GAAG,cAAchC,UAAU,wDAAhC,SACI,sBAAKA,UAAW,YAAhB,UACI,sBAAKA,UAAW,gBAAhB,UAAiC,cAAC,IAAD,IAAjC,4BACA,qBAAIA,UAAU,wBAAd,UACI,oBAAIA,UAAU,oBAAoB6B,KAAK,WAAvC,SACI,cAAC,IAAD,CAAMvB,GAAG,IAAT,oBAEJ,oBAAIN,UAAU,oBAAoB6B,KAAK,WAAvC,SACI,cAAC,IAAD,CAAMvB,GAAG,iBAAT,iCAEJ,oBAAIN,UAAU,oBAAoB6B,KAAK,WAAvC,SACI,eAAC,IAAD,CAAMvB,GAAG,SAAT,UAAkB,cAAC,IAAD,IAAlB,0BCrCb2B,EAZM,WACjB,IAAMC,EAAWC,cAGjB,OAFArC,QAAQC,IAAImC,GAGR,gCACI,8DACA,2DAA8BA,EAASE,gB,SCiBpCC,EAtBM,SAAC,GAA8C,IAA7ChD,EAA4C,EAA5CA,eAAgBiD,EAA4B,EAA5BA,MAAOC,EAAqB,EAArBA,gBAGvCC,EAAa,uCAAG,8BAAAlD,EAAA,sEACGC,MAAM,kBAAD,OAAmBF,EAAnB,UAA2C,CACjEG,OAAQ,SAFM,cACZwB,EADY,gBAKCA,EAAOC,OALR,OAKZxB,EALY,OAOlB8C,EAAgB9C,GAPE,2CAAH,qDAUhB,OACI,sBAAKuC,GAAI,kBAAT,UACA,oBAAI7B,QAAS,kBAAMqC,KAAnB,SAAoC,cAAC,IAAD,MAEpC,+DAA+BF,EAA/B,gBCwBOG,EA1CiB,SAAC,GAAc,IAAbrC,EAAY,EAAZA,OAAY,EAKElB,mBAAS,IALX,mBAKnC0B,EALmC,KAKnBC,EALmB,KAa1CE,qBAAU,YAES,uCAAG,8BAAAzB,EAAA,sEAEOC,MAAM,yBAFb,cAERyB,EAFQ,gBAIaA,EAAOC,OAJpB,OAIRC,EAJQ,OAKdL,EAAkBK,GALJ,2CAAH,qDASfC,KACD,IAEH,IAAMuB,EAAyB9B,EAAe+B,QAAO,SAAAC,GAAO,OAAIA,EAAQxC,SAAWA,KAGnF,OAGI,aAFA,CAEA,qBAEI,cAAC,EAAD,CAAcrB,UAAW2D,OCMtBG,EAzCM,SAAC,GAAc,IAAbzC,EAAY,EAAZA,OAAY,EAEKlB,mBAAS,CAAC,YAAe,KAF9B,mBAEpBC,EAFoB,KAEV2D,EAFU,KAkB3B,OAbA/B,qBAAU,YAEqB,uCAAG,8BAAAzB,EAAA,sEAEOC,MAAM,iBAAD,OAAkBa,IAF9B,cAEZ2C,EAFY,gBAIYA,EAAU9B,OAJtB,OAIZ+B,EAJY,OAKlBF,EAAYE,GALM,2CAAH,qDAQvBC,MAGqB,OAAzB9D,EAAS+D,YAET,6BAOQ,mCACS/D,EAAS+D,YAAYjD,KAAI,SAACkD,EAAYjD,GAAb,OACtB,sBAAKF,UAAW,UAAhB,UACQ,6BAAKmD,EAAWC,UAChB,4BAAID,EAAWA,eAFSjD,SCwBjDmD,EAtDW,SAAC,GAAqE,IAApEhE,EAAmE,EAAnEA,eAAgBkD,EAAmD,EAAnDA,gBAAiBe,EAAkC,EAAlCA,gBAAiBC,EAAiB,EAAjBA,YAAiB,EAC3DrE,mBAAS,IADkD,mBACpFsE,EADoF,KAC1EC,EAD0E,OAErDvE,mBAAS,IAF4C,mBAEpFwE,EAFoF,KAEvEC,EAFuE,KAKvFC,EAAML,EAAc,GAAK,kBAGvBM,EAAU,uCAAG,WAAO/B,GAAP,iBAAAxC,EAAA,6DACfwC,EAAEgC,iBADa,SAIMvE,MAAM,kBAAD,OAAmBF,EAAnB,aAA8C,CACpEG,OAAQ,OACRC,KAAMC,KAAKC,UAAU,CAACyD,QAASI,EAAUL,WAAYO,IACrD9D,QAAS,CACL,eAAgB,sBART,cAIToB,EAJS,gBAaIA,EAAOC,OAbX,OAaTxB,EAbS,OAcf8C,EAAgB9C,GAEhBgE,EAAY,IACZE,EAAe,IACfL,IAlBe,4CAAH,sDAqBhB,OACI,sBAAKtB,GAAI,cAAehC,UAAW,wBAA0B4D,EAA7D,UACI,sBAAK5D,UAAU,qDAAqDG,QAASmD,EAA7E,UACI,cAAC,IAAD,IADJ,4BAEA,qBAAKtD,UAAU,YAAf,SACA,uBAAMA,UAAW,aAAc+D,SAAUF,EAAzC,UACI,uBAAO7D,UAAW,qBAAsBgE,QAAS,WAAjD,sBAGA,uBAAOhC,GAAI,WAAYhC,UAAU,eAAeiE,KAAM,OAAQC,UAAQ,EAACC,MAAOX,EAAUY,SAAW,SAAAC,GAAK,OAAIZ,EAAYY,EAAMC,OAAOH,UACrI,uBAAOnE,UAAW,qBAAsBgE,QAAS,aAAjD,yBAGA,0BAAUhC,GAAI,aACJhC,UAAW,eAAgBuE,KAAM,IAAKC,KAAM,KAAML,MAAOT,EAAaQ,UAAQ,EAC9EE,SAAW,SAAAC,GAAK,OAAIV,EAAeU,EAAMC,OAAOH,UAC9D,uBAAOnE,UAAU,oBAAoBiE,KAAM,SAAUE,MAAO,+B,iBC8BzDM,EArEQ,SAAC,GAAa,IAC3BrE,EAD0B,EAAXsE,MACAC,OAAOvE,OADI,EAGAlB,mBAAS,IAHT,mBAGzBC,EAHyB,KAGf2D,EAHe,OAIP5D,mBAAS,MAJF,gCAKKA,oBAAS,IALd,mBAK1BqE,EAL0B,KAKbqB,EALa,KAM5BC,EAAiB,EAwBrB,OAlBA9D,qBAAU,YAEiB,uCAAG,8BAAAzB,EAAA,sEAEGC,MAAM,iBAAD,OAAkBa,IAF1B,cAEhB2C,EAFgB,gBAIQA,EAAU9B,OAJlB,OAIhB+B,EAJgB,OAKtBF,EAAYE,GALU,2CAAH,qDAWvBC,KAGD,CAAC7C,IAEa,OAAbjB,EAA0B,cAAC,EAAD,KAC1BA,EAAS+D,cAAa2B,EAAiB1F,EAAS+D,YAAY4B,QAIxD,sBAAK9E,UAAW,YAAhB,UACI,gCACA,6BAAKb,EAASoB,SACV,sBAAKP,UAAU,WAAf,UACI,sBAAKA,UAAU,cAAf,UACI,wCAAWb,EAAS4F,MAApB,OACA,oDAAmB,cAAC,IAAD,CACfC,KAAM,IAAIC,KAAK9F,EAAS+F,eACxBC,MAAO,mBACPC,OAAQ,4BAGhB,qBAAKpF,UAAU,sBAAf,SACI,cAAC,EAAD,CAAcX,eAAgBe,EAAQkC,MAAOnD,EAASmD,MAAOC,gBAAiBO,SAGtF,0BAEJ,qBAAK9C,UAAU,OAAf,SAAuBb,EAASqB,QAChC,qBAAKR,UAAU,MAAf,SACI,sBAAKA,UAAU,4BAAf,UAA2C,cAAC,IAAD,IAA3C,IAA0D6E,EAA1D,kEAEH,cAAC,EAAD,CAAczE,OAAQA,IACtB,uBACL,cAAC,EAAD,CAAmBf,eAAgBe,EAAQmC,gBAAiBO,EAAaS,YAAaA,EAAaD,gBAnDnF,WACpBsB,GAAgBrB,MAoDZ,uBACI,2DACA,cAAC,EAAD,CAAyBnD,OAAQA,S,QCkBlCiF,EArFD,SAAC1E,GAAW,IAAD,IAIKzB,mBAAS,IAJd,mBAIdoG,EAJc,KAIPC,EAJO,OAKWrG,mBAAS,IALpB,mBAKdsG,EALc,KAKJC,EALI,OAOiBvG,qBAPjB,mBAOdF,EAPc,KAOD0G,EAPC,OAQmBxG,mBAAS,IAR5B,mBAQdyG,EARc,KAQAC,EARA,KAoBrB,GAAI5G,EAAa,OAAO,cAAC,EAAD,CAAkBA,YAAaA,KATtC,WACb,GAAI6G,eAAeC,QAAQ,SAAU,CACjC,IAAMC,EAAcF,eAAeC,QAAQ,SAC3CJ,EAAeK,IAOvBC,GAIA,IAAMC,EAAW,SAACjD,GACd0C,EAAe1C,GACf6C,eAAeK,QAAQ,QAASlD,IAM9BmD,EAAK,uCAAG,WAAMrE,GAAN,iBAAAxC,EAAA,6DACVwC,EAAEgC,iBADQ,SAIWvE,MAAM,aAAc,CACjCC,OAAQ,OACRC,KAAMC,KAAKC,UAAU,CAAC2F,MAAOA,EAAOE,SAAUA,IAC9C5F,QAAS,CACL,eAAgB,sBARlB,cAIJoB,EAJI,gBAYoBA,EAAOC,OAZ3B,OAYJ+B,EAZI,OAgBY,MAAlBhC,EAAOnB,QACPC,QAAQC,IAAI,SAAWiD,GACvBiD,EAASjD,GACTrC,EAAM+E,kBAENE,EAAgB,oDArBV,2CAAH,sDA0BX,OACI,qBAAK5F,UAAW,YAAhB,SACA,uBAAMA,UAAW,aAAcoG,KAAM,OAAQrC,SAAUoC,EAAvD,UACI,qDACA,uBACA,sBAAKnG,UAAW,aAAhB,UACI,mBAAGA,UAAW,qBAAd,SAAqC2F,IACrC,uBAAO3F,UAAW,qBAAsBgE,QAAS,QAAjD,oBAGI,uBAAOC,KAAM,QAASjC,GAAI,QAAUhC,UAAW,eAAgBqG,KAAM,QAASC,YAAa,mBACpFpC,UAAQ,EAACC,MAAOmB,EAAOlB,SAAW,SAAAC,GAAK,OAAIkB,EAASlB,EAAMC,OAAOH,UAE5E,uBAAOnE,UAAU,qBAAqBgE,QAAS,WAA/C,4BAGI,0BAAOC,KAAM,OAAQjC,GAAI,WAAYhC,UAAW,eAAgBqG,KAAM,WAAYlC,MAAOqB,GAAzF,qBACa,YADb,4BAEoB,4BAFpB,uDAGkB,SAAAnB,GAAK,OAAIoB,EAAYpB,EAAMC,OAAOH,UAHpD,OAKR,uBAAOF,KAAM,SAAUjE,UAAU,oBAAoBmE,MAAO,4B,SCVzDoC,EAtEG,SAAC5F,GAAW,IAAD,EAEWzB,mBAAS,IAFpB,mBAEdsH,EAFc,KAEJC,EAFI,KAMfC,EAAa,uCAAG,WAAOC,GAAP,SAAArH,EAAA,6DACdQ,QAAQC,IAAI4G,GADE,SAIepH,MAAM,qBAAsB,CACrCC,OAAQ,OACRC,KAAMC,KAAKC,UAAU,CAAC,MAASgH,IAC/B/G,QAAS,CACD,eAAgB,sBAR9B,OAagB,MAbhB,OAaKC,SACHC,QAAQC,IAAI,WAAa4G,EAAe,WACxChG,EAAMiG,gBAAgB,kCAfxB,2CAAH,sDAoCnB,OAdA7F,qBAAU,YAEkB,uCAAG,8BAAAzB,EAAA,sEAEUC,MAAM,+BAFhB,cAETwD,EAFS,gBAIeA,EAAU9B,OAJzB,OAIT+B,EAJS,OAKflD,QAAQC,IAAIiD,GACZyD,EAAYzD,GANG,2CAAH,qDASpB6D,MAKJ,mCACI,qBAAK7G,UAAW,YAAhB,SACI,qBAAKA,UAAW,uBAAhB,SACCwG,EAASvG,KAAI,SAACmD,EAASlD,GAAV,OACV,sBAAKF,UAAU,iBAAf,UACQ,qBAAKA,UAAU,OAAf,SACQ,wBAAQA,UAAU,wBAAwBK,aAAY,iBAC9CF,QAAS,kBAAMuG,EAActD,EAAQkC,QAD7C,SAGQ,cAAC,IAAD,QAIpB,gCACA,6BAAKlC,EAAQ0D,gBACT,4BAAI1D,EAAQkC,aAXiBpF,aC8B9C6G,EA5ED,SAACpG,GAAW,IAAD,EACWzB,mBAAS,IADpB,mBACdsE,EADc,KACJC,EADI,OAEWvE,mBAAS,IAFpB,mBAEdsG,EAFc,KAEJC,EAFI,OAGKvG,mBAAS,IAHd,mBAGdoG,EAHc,KAGPC,EAHO,OAImBrG,mBAAS,IAJ5B,mBAId4B,EAJc,KAIA8F,EAJA,KAQfI,EAAU,uCAAG,WAAOlF,GAAP,eAAAxC,EAAA,6DACfwC,EAAEgC,iBADa,SAIMvE,MAAM,oBAAqB,CAC5CC,OAAQ,OACRC,KAAMC,KAAKC,UAAU,CAACS,OAAQoD,EAAU8B,MAAOA,EAAOE,SAAUA,IAChE5F,QAAS,CACL,eAAgB,sBART,cAIToB,EAJS,gBAaIA,EAAOC,OAbX,cAcO,MAAlBD,EAAOnB,SAEP+G,EAAgB,sCAChBnD,EAAY,IACZgC,EAAY,IACZF,EAAS,KAnBE,2CAAH,sDAuBhB,OAAI5E,EAAM3B,YAIN,sBAAKgB,UAAW,YAAhB,UACI,uBAAMA,UAAW,aAAcoG,KAAM,OAArC,UACI,yDACA,uBACA,sBAAKpG,UAAW,aAAhB,UACI,mBAAGA,UAAW,uBAAd,SAAuCc,IACvC,wBAAOd,UAAW,qBAAsBgE,QAAS,SAAjD,oBAGA,uBAAOhC,GAAI,SAAUhC,UAAW,eAAgBiE,KAAM,OAAQE,MAAOX,EAAUU,UAAQ,EAACE,SAAW,SAAAC,GAAK,OAAIZ,EAAYY,EAAMC,OAAOH,aAErI,wBAAOnE,UAAW,qBAAsBgE,QAAS,QAAjD,mBAGA,uBAAOC,KAAM,QAASjC,GAAI,QAChBhC,UAAW,eACXmE,MAAOmB,EACPpB,UAAQ,EACVE,SAAW,SAAAC,GAAK,OAAIkB,EAASlB,EAAMC,OAAOH,aAEtD,wBAAOnE,UAAW,qBAAsBgE,QAAS,WAAjD,2BAGA,uBAAOhC,GAAI,WAAYhC,UAAW,eAAgBiE,KAAM,WAAYE,MAAOqB,EAAUtB,UAAQ,EAACE,SAAW,SAAAC,GAAK,OAAIoB,EAAYpB,EAAMC,OAAOH,gBAG3I,sBAAKnE,UAAW,oBAAqBG,QAAS6G,EAA9C,UAA0D,cAAC,IAAD,IAA1D,2BAGJ,uBACA,mDACA,cAAC,EAAD,CAAWJ,gBAAiBA,OAKzB,cAAC,EAAD,KCIAK,EA5EG,SAACtG,GAAW,IAAD,EACGzB,mBAAS,IADZ,mBAClBqB,EADkB,KACV2G,EADU,OAEChI,mBAAS,IAFV,mBAElBsB,EAFkB,KAEX2G,EAFW,OAGejI,mBAAS,IAHxB,mBAGlB4B,EAHkB,KAGJ8F,EAHI,KAOnBQ,EAAO,uCAAG,WAAOtF,GAAP,mBAAAxC,EAAA,6DACZwC,EAAEgC,iBACIuD,EAAa9G,EAAO+G,WAAW,IAAK,KACpCC,EAAQtC,KAAKuC,MACnB1H,QAAQC,IAAI,QAAUwH,EAAQ,gBAAkBF,GAJpC,SAOS9H,MAAM,+BAAgC,CACvDC,OAAQ,OACRC,KAAMC,KAAKC,UAAU,CACjBS,OAAQiH,EACR7G,MAAOA,EACPD,OAAQA,EACR2E,cAAeqC,EACfxC,MAAOpE,EAAM3B,cACjBY,QAAS,CACL,eAAgB,sBAhBZ,cAONoB,EAPM,gBAqBOA,EAAOC,OArBd,cAsBU,MAAlBD,EAAOnB,SAEP+G,EAAgB,mCAChBM,EAAU,IACVC,EAAS,KA1BD,4CAAH,sDAgCb,OAAIxG,EAAM3B,YAGN,qBAAKgB,UAAW,YAAhB,SACA,uBAAMA,UAAW,aAAcoG,KAAM,OAAQrC,SAAUqD,EAAvD,UACI,qDACA,uBACA,sBAAKpH,UAAW,aAAhB,UAA8B,mBAAGA,UAAW,uBAAd,SAAuCc,IACrE,uBAAOd,UAAW,qBAAsBgE,QAAS,SAAjD,wBAGI,uBAAOhC,GAAI,SAAUhC,UAAU,eAAeiE,KAAM,OAAQE,MAAO5D,EAC5D2D,UAAQ,EAACE,SAAW,SAAAC,GAAK,OAAI6C,EAAU7C,EAAMC,OAAOH,UAE/D,uBAAOnE,UAAU,qBAAqBgE,QAAS,YAA/C,oBAGI,0BAAUhC,GAAI,YACPhC,UAAW,eACXmE,MAAO3D,EACP0D,UAAQ,EACRK,KAAM,IACNC,KAAM,KACNJ,SAAW,SAAAC,GAAK,OAAI8C,EAAS9C,EAAMC,OAAOH,aAErD,uBAAOF,KAAM,SAAUjE,UAAU,oBAAoBmE,MAAO,oBAOzD,cAAC,EAAD,KC7BAsD,EAzCe,SAAC9G,GAAW,MAKMzB,mBAAS,IALf,mBAK/B0B,EAL+B,KAKfC,EALe,KA4BlC,OAfJE,qBAAU,YAES,uCAAG,8BAAAzB,EAAA,sEAEQC,MAAM,yBAFd,cAERyB,EAFQ,gBAIaA,EAAOC,OAJpB,OAIRC,EAJQ,OAKdL,EAAkBK,GALJ,2CAAH,qDASfC,KACD,IAMK,cAFA,CAEA,sBACI,mDAEA,cAAC,EAAD,CAAcpC,UAAW6B,EAAgB5B,YAAa2B,EAAM3B,kBCqC7D0I,MA9Df,WAAe,MAE2BxI,mBAAS,MAFpC,mBAEJF,EAFI,KAES0G,EAFT,KAuBX,OAlBA3E,qBAAU,YACW,WACb,GAAI8E,eAAeC,QAAQ,SAAU,CACjC,IAAMC,EAAcF,eAAeC,QAAQ,SAC3CJ,EAAeK,IAGvBC,GACAlG,QAAQC,IAAI,iBAAmBf,KAChC,CAACA,IAUA,sBAAMgB,UAAU,gBAAgBgC,GAAG,aAAnC,SAIA,cAAC,IAAD,UACI,sBAAKhC,UAAU,MAAf,UAEI,cAAC,EAAD,CAAQhB,YAAaA,EAAa+C,aAbzB,WACjB8D,eAAe8B,QACfjC,EAAe,SAYP,qBAAK1D,GAAG,YAAR,SAGI,eAAC,IAAD,WAGI,cAAC,IAAD,CAAO4F,KAAK,IAAIC,UAAWzG,EAAU0G,OAAK,IAC1C,cAAC,IAAD,CAAOF,KAAK,SAASC,UAAWlG,EAAWmG,OAAK,IAChD,cAAC,IAAD,CACIF,KAAK,iBACLC,UAAW,kBAAM,cAAC,EAAD,CAAkB7I,YAAaA,KAChD8I,OAAK,IAET,cAAC,IAAD,CAAOF,KAAK,oBAAoBC,UAAWpD,IAG3C,cAAC,IAAD,CAAOmD,KAAK,SAASC,UAAW,kBAAM,cAAC,EAAD,CAAOnC,eAAgBA,OAC7D,cAAC,IAAD,CAAOkC,KAAK,SAASC,UAAW,kBAAM,cAAC,EAAD,CAAO7I,YAAaA,OAC1D,cAAC,IAAD,CAAO4I,KAAK,iBACLC,UAAW,kBAAM,cAAC,EAAD,CAAuB7I,YAAaA,OAC5D,cAAC,IAAD,CAAO4I,KAAK,aAAaC,UAAW,kBAAM,cAAC,EAAD,CAAW7I,YAAaA,OAClE,cAAC,IAAD,CAAO6I,UAAW5F,iBCzD3B8F,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,8BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,O,cCIdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M",
  "file": "static/js/main.262738e5.chunk.js",
  "sourcesContent": [
    "export default __webpack_public_path__ + \"static/media/reactAnimado.9967cef2.gif\";",
    "import React, {useState} from 'react';\nimport {Link} from \"react-router-dom\";\nimport {FaTimes} from \"react-icons/all\";\n\n//Nos traemos como parámetro la lista de artículos que nos manda desde la página de article listPage.\nconst ArticlesList = ({articulos, tokenSesion, setusuarioExito}) => {\n\n    const [articulo, setArticulo] = useState([]);\n\n    const borrararticulo = async (nombreArticulo) => {\n        //Lllamamos a la API por post y se le dice que el cuerpo es un JSON donde se pase\n        // el nombre de uusuario y el texto del comentario y se le indican las cabeceeras.\n        const result = await fetch(`/api/borrarPost`, {\n                method: 'post',\n                body: JSON.stringify({\"nombre\": nombreArticulo}),\n                headers: {\n                    'Content-Type': 'application/json',\n                }\n            }\n        );\n\n        if (result.status === 200) {\n            console.log(\"Usuario \" + articulo + \"borrado\");\n            setusuarioExito(\"Artículo borrado correctamente\");\n        }\n    }\n\n    if (tokenSesion) {\n        return (\n            <>\n                <div className={\"container\"}>\n                {articulos.map((articulo, key) => (\n                    <div className=\"col media py-3\" key={key}>\n                        <div className=\"mr-3\">\n                            <button className=\"btn btn-sm btn-danger\"\n                                    onClick={() => borrararticulo(articulo.nombre)} aria-label={\"Borrar Artículo\"}>\n                                {/*Importamos de la libreria react icons iconos para mejorar el aspecto de la web. En este caso la X*/}\n                                <FaTimes/>\n                            </button>\n                        </div>\n                        <div>\n                        <Link key={key} to={`/articulo/${articulo.nombre}`} >\n                            <h5>{articulo.titulo}</h5>\n                            <p>{articulo.texto.substring(0,80)}...</p>\n                        </Link>\n                        </div>\n                    </div>\n\n                ))}\n                </div>\n            </>\n\n        );\n    } else {\n        return (\n            <>\n                {/*\n        //Hacemos un map del array de artículos para sacar su título. Y Después usamos el Rotuer de React para crear\n        los links que dirigan a cada artículo\n*/}\n                {articulos.map((articulo, key) => (\n                    <Link className={\"article-list-item\"} key={key} to={`/articulo/${articulo.nombre}`} >\n                        <h3>{articulo.titulo}</h3>\n                        <p>{articulo.texto.substring(0,150)}...</p>\n                    </Link>\n                ))}\n            </>\n        )\n    }\n\n};\nexport default ArticlesList;\n",
    "import React, {useEffect, useState} from 'react';\nimport ArticlesList from \"../components/ArticlesList\";\n\n\n\nconst ArticlesListPage = (props) =>  {\n\n//Usamos React Hooks. Definimos la información del articúlo, que va a coger la información del servidor.\n// SetArcileinfo es la información con la que vamos a poblar la info del partículo y el objeto vacío que pasamos como argumento es el valor inicial de esa articleinfo antes de cargar algún dato que cambie su estado.\n//Se puede poner un valor por defecto de las propiedades que esperamos recibir en el article info\n    const [todosArticulos, setTodosArticulos] = useState([]);\n    const [usuarioExito, setusuarioExito] = useState([]);\n\n//Añadimos los datos redicibidos por la llamada al back usando use effect, pasando params en blanco para que se pase como argumento cualquier cosa que nos llegue.\n//Useeffect se llama continuamente cada vez que el componente se actualiza y se llama en bucle infinito si se está actualizando continuamente, para eso hay que usar sus deps usando un array\n//Si el array es vacío sólo se carga cuando se carga el componente, sólo la primera vez cuando se carga el componente,\n// en este caso artículos. Para especificar que se cargue cada vez que cambie algo, tenemos que indicar en qué fijarse\n// dentro de ese array, en este caso nos interesa la url, que es la const name que hemos sacado de los parámetros de la URL\n//Usamos setArticleInfo y le indicamos los valores.\n    useEffect(() => {\n        //Creamos una función para traernos los datos ya que use effect no podemos hacerla async\n        const fetchData = async () => {\n            //Nos traemos los datos llamando a la api y guardamos la respuesta\n            const result  = await fetch(`/api/obtenerArticulosReducido`);\n            //Como la respuesta incluye cosas como el código de respuesta y sólo queremos el cuerpo, la guardamos en un json\n            const responseBody = await result.json();\n            setTodosArticulos(responseBody);\n\n        }\n        //Llamamos a la función que hemos creado\n        fetchData();\n    }, );\n\n\n\n    return (\n        //<> </> Shorthand de <react.Fragment> Poner dentro el contenido </react.Fragment>==> Envolvemos las líneas de código\n        // con <> para exportarlo sin tener que usar divs. De normal para exportar varios niveles se tiene que envolver en div\n        <>\n            <div className={\"container\"}>\n            <div className={\"h1\"}>Artículos más recientes</div>\n                <p className={\"success text-success\"}>{usuarioExito}</p>\n            <hr/>\n\n            {/*Llamamos al componente que muestra la lista de artículos y le mandamos el fichero con los artículos como parémtro  */}\n            <ArticlesList articulos={todosArticulos} tokenSesion={props.tokenSesion} setusuarioExito={setusuarioExito}/>\n            </div>\n        </>\n    )\n\n};\n\n\nexport default ArticlesListPage;\n\n",
    "import React from 'react';\nimport logoReact from '../img/reactAnimado.gif'\nimport ArticlesListPageReducido from \"./ArticlesListPageReducido\";\n\nconst HomePage = () => {\n\n    return (\n\n        //<> </> Shorthand de <react.Fragment> Poner dentro el contenido </react.Fragment>==> Envolvemos las líneas de código\n        // con <> para exportarlo sin tener que usar divs. De normal para exportar varios niveles se tiene que envolver en div\n        <div className={\"container\"}>\n            <div className=\"row\">\n                <div className=\"row col align-content-center justify-content-center\">\n                    <div>                    <h1>React JS</h1>\n                        <img src={logoReact} width={300} height={300} alt={\"Logo React\"}/>\n                        <h1>Encuentra todo lo que necesitas saber</h1></div>\n                </div>\n                <div className=\" col \">\n                    <ArticlesListPageReducido/>\n                </div>\n            </div>\n        </div>\n\n)\n};\n\nexport default HomePage;\n",
    "import React from 'react';\n\n\nconst AboutPage = () => (\n    <>\n        <h1>Sobre mi</h1>\n        <p>Texto</p>\n        <p>Texto</p>\n        <p>Texto</p>\n    </>\n);\n\nexport default AboutPage;\n",
    "import React, {useEffect, useState} from 'react';\nimport ArticlesList from \"../components/ArticlesList\";\n\n\n\nconst ArticlesListPage = (props) =>  {\n\n//Usamos React Hooks. Definimos la información del articúlo, que va a coger la información del servidor.\n// SetArcileinfo es la información con la que vamos a poblar la info del partículo y el objeto vacío que pasamos como argumento es el valor inicial de esa articleinfo antes de cargar algún dato que cambie su estado.\n//Se puede poner un valor por defecto de las propiedades que esperamos recibir en el article info\n    const [todosArticulos, setTodosArticulos] = useState([]);\n    const [usuarioExito, setusuarioExito] = useState([]);\n\n//Añadimos los datos redicibidos por la llamada al back usando use effect, pasando params en blanco para que se pase como argumento cualquier cosa que nos llegue.\n//Useeffect se llama continuamente cada vez que el componente se actualiza y se llama en bucle infinito si se está actualizando continuamente, para eso hay que usar sus deps usando un array\n//Si el array es vacío sólo se carga cuando se carga el componente, sólo la primera vez cuando se carga el componente,\n// en este caso artículos. Para especificar que se cargue cada vez que cambie algo, tenemos que indicar en qué fijarse\n// dentro de ese array, en este caso nos interesa la url, que es la const name que hemos sacado de los parámetros de la URL\n//Usamos setArticleInfo y le indicamos los valores.\n    useEffect(() => {\n        //Creamos una función para traernos los datos ya que use effect no podemos hacerla async\n        const fetchData = async () => {\n            //Nos traemos los datos llamando a la api y guardamos la respuesta\n            const result  = await fetch(`/api/obtenerArticulos`);\n            //Como la respuesta incluye cosas como el código de respuesta y sólo queremos el cuerpo, la guardamos en un json\n            const responseBody = await result.json();\n            setTodosArticulos(responseBody);\n\n        }\n        //Llamamos a la función que hemos creado\n        fetchData();\n    }, );\n\n\n\n    return (\n        //<> </> Shorthand de <react.Fragment> Poner dentro el contenido </react.Fragment>==> Envolvemos las líneas de código\n        // con <> para exportarlo sin tener que usar divs. De normal para exportar varios niveles se tiene que envolver en div\n        <>\n            <div className={\"container\"}>\n            <div className={\"h1\"}>Entradas del blog</div>\n                <p className={\"success text-success\"}>{usuarioExito}</p>\n            <hr/>\n\n            {/*Llamamos al componente que muestra la lista de artículos y le mandamos el fichero con los artículos como parémtro  */}\n            <ArticlesList articulos={todosArticulos} tokenSesion={props.tokenSesion} setusuarioExito={setusuarioExito}/>\n            </div>\n        </>\n    )\n\n};\n\n\nexport default ArticlesListPage;\n\n",
    "import React from 'react';\n//Importamos link para hacer los links en vez de con la etiqueta anchor de HTML\nimport {Link} from \"react-router-dom\";\nimport {FaReact, FiUsers, GrLogout} from \"react-icons/all\";\n\n\nconst NavBar = (props) => {\n\n    if (props.tokenSesion) {\n        return (\n            <nav className=\"container navbar navbar-dark bg-dark navbar-expand-sm\">\n                <div className={\"container\"}>\n                    <div className={\"h4 text-white\"}><FaReact/>  Desarrollo Web React</div>\n                    <ul className=\"navbar-nav ml-sm-auto\">\n                        <li className=\"nav-item nav-link\" href=\"#mission\">\n                            <Link to=\"/\">Home</Link>\n                        </li>\n                        <li className=\"nav-item nav-link\" href=\"#mission\">\n                            <Link to=\"/articles-list\">Entradas del blog</Link>\n                        </li>\n                        <li className=\"nav-item nav-link\" href=\"#mission\">\n                            <Link to=\"/users\">Gestión Usuarios</Link>\n                        </li>\n                        <li className=\"nav-item nav-link\" href=\"#mission\">\n                            <Link to=\"/nuevoPost\">Nuevo post</Link>\n                        </li>\n                        <li className=\"nav-item nav-link\" href=\"#mission\">\n                            Bienvenid@, {props.tokenSesion}\n                        </li>\n\n                        <form className=\"form-inline\">\n                            <button className=\"btn btn-outline-light\" onClick={(e) => props.cerrarSesion()}><GrLogout className={\"white-text\"}/> Cerrar Sesión</button>\n                        </form>\n                    </ul>\n                </div>\n            </nav>\n        );\n    } else {\n\n        return (\n\n            <nav id=\"navbar-site\" className=\"container navbar navbar-dark bg-dark navbar-expand-sm\">\n                <div className={\"container\"}>\n                    <div className={\"h4 text-white\"}><FaReact/>  Desarrollo Web React</div>\n                    <ul className=\"navbar-nav ml-sm-auto\">\n                        <li className=\"nav-item nav-link\" href=\"#mission\">\n                            <Link to=\"/\">Home</Link>\n                        </li>\n                        <li className=\"nav-item nav-link\" href=\"#mission\">\n                            <Link to=\"/articles-list\">Entradas del blog</Link>\n                        </li>\n                        <li className=\"nav-item nav-link\" href=\"#mission\">\n                            <Link to=\"/admin\"><FiUsers/>AdminArea</Link>\n                        </li>\n                    </ul>\n                </div>\n            </nav>\n\n        );\n\n    }\n\n}\n\n\nexport default NavBar;\n\n\n\n",
    "import React from 'react';\nimport { useLocation} from 'react-router-dom';\n\nconst NotFoundPage = () => {\n    const location = useLocation();\n    console.log(location);\n\n    return(\n        <div>\n            <h1>404: Página no encontrada</h1>\n            <h1>Recurso no encontrado en {location.pathname}</h1>\n        </div>\n    )\n};\n\nexport default NotFoundPage;\n",
    "import React from 'react';\nimport {AiFillLike} from \"react-icons/all\";\n\n//El componente como parámetros el nombre del artículo (sacado de la URL params), votos sacado de la info del artículo\n// de la página del artículo y pasamos otro param que nos servirá para albergar los datos del body de la request\nconst SeccionVotos = ({nombreArticulo, votos, setInfoArticulo}) => {\n\n    //Hacemos una llamada post para incrementar el número de me votos de cada artículo cogiendo el nombre del artículo\n const votarArticulo = async () => {\n     const result = await fetch(`/api/articulos/${nombreArticulo}/votar`, {\n         method: 'post',\n     })\n     //Cogemos el cuerpo de la respuesta pasado a JSON\n     const body = await result.json();\n     //Ponemos la infor del artículo como el cuerpo de la respuesta\n     setInfoArticulo(body);\n }\n    //Devolvemos un botón para que llame a la función me gusta cuando se le haga click y mostramos los votos del artículo\n    return (\n        <div id={'upvotes-section'}>\n        <h3 onClick={() => votarArticulo()}><AiFillLike/></h3>\n        {/*Mostramos los datos del artículo*/}\n        <p>Este artículo ha recibiddo {votos} votos</p>\n        </div>\n        );\n};\n\nexport default SeccionVotos;\n",
    "import React, {useEffect, useState} from 'react';\nimport ArticlesList from \"./ArticlesList\";\n\n\nconst RelatedArticlesListPage = ({nombre}) => {\n\n//Usamos React Hooks. Definimos la información del articúlo, que va a coger la información del servidor.\n// SetArcileinfo es la información con la que vamos a poblar la info del partículo y el objeto vacío que pasamos como argumento es el valor inicial de esa articleinfo antes de cargar algún dato que cambie su estado.\n//Se puede poner un valor por defecto de las propiedades que esperamos recibir en el article info\n    const [todosArticulos, setTodosArticulos] = useState([]);\n\n//Añadimos los datos redicibidos por la llamada al back usando use effect, pasando params en blanco para que se pase como argumento cualquier cosa que nos llegue.\n//Useeffect se llama continuamente cada vez que el componente se actualiza y se llama en bucle infinito si se está actualizando continuamente, para eso hay que usar sus deps usando un array\n//Si el array es vacío sólo se carga cuando se carga el componente, sólo la primera vez cuando se carga el componente,\n// en este caso artículos. Para especificar que se cargue cada vez que cambie algo, tenemos que indicar en qué fijarse\n// dentro de ese array, en este caso nos interesa la url, que es la const name que hemos sacado de los parámetros de la URL\n//Usamos setArticleInfo y le indicamos los valores.\n    useEffect(() => {\n        //Creamos una función para traernos los datos ya que use effect no podemos hacerla async\n        const fetchData = async () => {\n            //Nos traemos los datos llamando a la api y guardamos la respuesta\n            const result = await fetch(`/api/obtenerArticulos`);\n            //Como la respuesta incluye cosas como el código de respuesta y sólo queremos el cuerpo, la guardamos en un json\n            const responseBody = await result.json();\n            setTodosArticulos(responseBody);\n\n        }\n        //Llamamos a la función que hemos creado\n        fetchData();\n    }, []);\n\n    const articulosRelacionados = (todosArticulos.filter(article => article.nombre !== nombre));\n\n\n    return (\n        //<> </> Shorthand de <react.Fragment> Poner dentro el contenido </react.Fragment>==> Envolvemos las líneas de código\n        // con <> para exportarlo sin tener que usar divs. De normal para exportar varios niveles se tiene que envolver en div\n        <>\n            {/*Llamamos al componente que muestra la lista de artículos y le mandamos el fichero con los artículos como parémtro  */}\n            <ArticlesList articulos={articulosRelacionados}/>\n        </>\n    )\n\n};\n\n\nexport default RelatedArticlesListPage;\n\n",
    "import React, {useEffect, useState} from 'react'\n\n//Función que recibe los comentarios como argumentos, nos recorremos con un map un array y acada posición del array la\n// pintamos con el nombre de usuario y el texto del comentario\nconst CommentsList = ({nombre}) => {\n\n        const [articulo, setArticulo] = useState({\"comentarios\": []});\n\n\n        useEffect(() => {\n                //Creamos una función para traernos los datos ya que use effect no podemos hacerla async\n                const fetchDataArticulo = async () => {\n                        //Nos traemos los datos llamando a la api y guardamos la respuesta\n                        const resultado  = await fetch(`/api/articulo/${nombre}`);\n                        //Como la respuesta incluye cosas como el código de respuesta y sólo queremos el cuerpo, la guardamos en un json\n                        const cuerpoRespuesta = await resultado.json();\n                        setArticulo(cuerpoRespuesta);\n                }\n                //Llamamos a la función que hemos creado\n                fetchDataArticulo();\n        }, );\n\n        if (articulo.comentarios === null) {\n        return (\n            <>\n            </>\n        );\n        }\n        else {\n                return (\n\n                    <>\n                            {articulo.comentarios.map((comentario, key) => (\n                                <div className={\"comment\"} key={key}>\n                                        <h4>{comentario.usuario}</h4>\n                                        <p>{comentario.comentario}</p>\n                                </div>\n\n                            ))}\n                    </>\n\n                )\n        }\n};\n\nexport default CommentsList;\n",
    "import React, {useState} from 'react';\nimport {AiFillPlusCircle} from \"react-icons/all\";\n\nconst AddComentarioForm = ({nombreArticulo, setInfoArticulo, interruptorForm, mostrarForm}) => {\n    const [username, setUsername] = useState('');\n    const [commentText, setCommentText] = useState('');\n    //recogemos el valor de mostrar u ocultar el formulario de las props y en función de eso le añadimos el CSS para que\n    // se muestre o no en el div contenedor.\n    let css = mostrarForm ? \"\" : \"add-appointment\";\n\n    //Función para añadir un comentario\n    const addComment = async (e) => {\n        e.preventDefault();\n        //Lllamamos a la API por post y se le dice que el cuerpo es un JSON donde se pase\n        // el nombre de uusuario y el texto del comentario y se le indican las cabeceeras.\n        const result = await fetch(`/api/articulos/${nombreArticulo}/comentar`, {\n            method: 'post',\n            body: JSON.stringify({usuario: username, comentario: commentText}),\n            headers: {\n                'Content-Type': 'application/json',\n            }\n        });\n\n        //El cuerpo es el resultado pasado a json.\n        const body = await result.json();\n        setInfoArticulo(body);\n        //Se dejan en blanco nuevamente los campos del formulario\n        setUsername('');\n        setCommentText('');\n        interruptorForm();\n    }\n\n    return (\n        <div id={\"comentarios\"} className={\"card textcenter mt-3 \" + css}>\n            <div className=\"apt-addheading card-header bg-secondary text-white\" onClick={interruptorForm}>\n                <AiFillPlusCircle/> Añadir comentario </div>\n            <div className=\"card-body\">\n            <form className={\"form-group\"} onSubmit={addComment}>\n                <label className={\"form-control-label\"} htmlFor={\"username\"}>\n                    Usuario:\n                </label>\n                <input id={\"username\"} className=\"form-control\" type={\"text\"} required value={username} onChange={(event => setUsername(event.target.value))}/>\n                <label className={\"form-control-label\"} htmlFor={\"comentario\"}>\n                    Comentario:\n                </label>\n                <textarea id={\"comentario\"}\n                          className={\"form-control\"} rows={\"4\"} cols={\"50\"} value={commentText} required\n                          onChange={(event => setCommentText(event.target.value))}/>\n            <input className=\"btn btn-secondary\" type={\"submit\"} value={\"Enviar comentario\"}/>\n            </form>\n            </div>\n        </div>\n\n\n    );\n}\n\nexport default AddComentarioForm;\n",
    "import React, {useEffect, useState} from 'react';\nimport NotFoundPage from \"./NotFoundPage\";\nimport SeccionVotos from \"../components/SeccionVotos\";\nimport RelatedArticlesListPage from \"../components/RelatedArticlesListPage\";\nimport CommentsList from \"../components/CommentsList\";\nimport AddComentarioForm from \"../components/AddComentarioForm\";\nimport Moment from \"react-moment\";\nimport {FaComments} from \"react-icons/all\";\n\nconst PaginaArticulo = ({match}) => {\n    const nombre = match.params.nombre;\n\n    const [articulo, setArticulo] = useState({ });\n    const[error, setError] = useState(null);\n    const[mostrarForm, setMostrarForm] = useState(false);\n    let numComentarios = 0;\n\n    const interruptorForm = () => {\n        setMostrarForm(!mostrarForm);\n    }\n\n    useEffect(() => {\n        //Creamos una función para traernos los datos ya que use effect no podemos hacerla async\n        const fetchDataArticulo = async () => {\n            //Nos traemos los datos llamando a la api y guardamos la respuesta\n            const resultado  = await fetch(`/api/articulo/${nombre}`);\n            //Como la respuesta incluye cosas como el código de respuesta y sólo queremos el cuerpo, la guardamos en un json\n            const cuerpoRespuesta = await resultado.json();\n            setArticulo(cuerpoRespuesta);\n\n        }\n        //Llamamos a la función que hemos creado\n\n\n        fetchDataArticulo();\n\n\n    }, [nombre]);\n\n    if (articulo === null) return <NotFoundPage/>;\n    if (articulo.comentarios) numComentarios = articulo.comentarios.length;\n\n    return(\n\n            <div className={\"container\"}>\n                <div>\n                <h1>{articulo.titulo}</h1>\n                    <div className=\"row mb-0\">\n                        <div className=\" col-4 mb-0\">\n                            <p>Autor: {articulo.autor} </p>\n                            <p>Fecha creación: <Moment\n                                date={new Date(articulo.fechaCreacion)}\n                                parse={\"YYYY-MM-DD hh:mm\"}\n                                format={\"YYYY MMM-D h:mm a\"}/>\n                            </p>\n                            </div>\n                        <div className=\"col-4 offset-4 mb-0\">\n                            <SeccionVotos nombreArticulo={nombre} votos={articulo.votos} setInfoArticulo={setArticulo}/>\n                        </div>\n                    </div>\n                    <hr/>\n                </div>\n                <div className=\"mb-3\">{articulo.texto}</div>\n                <div className=\"row\">\n                    <div className=\"col-6 text-left text-dark\"><FaComments/> {numComentarios} Comentario(s) en este post. Únete a la conversación</div>\n                </div>\n                 <CommentsList nombre={nombre}/>\n                 <hr/>\n            <AddComentarioForm nombreArticulo={nombre} setInfoArticulo={setArticulo} mostrarForm={mostrarForm} interruptorForm={interruptorForm} />\n\n            <hr/>\n                <h4>Artículos relacionados</h4>\n                <RelatedArticlesListPage nombre={nombre}/>\n            </div>\n\n    );\n}\n\nexport default PaginaArticulo;\n",
    "import React, {useState} from 'react';\nimport ArticlesListPage from \"../pages/ArticlesListPage\";\n\n\n//Recogemos en propiedades la función setToken\nconst Login = (props) => {\n\n\n    //Guardamos en los estados el email y la contraseña junto con el token que vamos a utilizar para comprobar la sesión\n    const [email, setEmail] = useState('');\n    const [password, setPassword] = useState('');\n    //Guardamos el token de sesión en la memoria\n    const [tokenSesion, setTokenSesion] = useState();\n    const [mensajeError, setMensajeError] = useState(\"\");\n\n\n    const getToken = () => {\n        if (sessionStorage.getItem('token')) {\n            const tokenString = sessionStorage.getItem('token');\n            setTokenSesion(tokenString);\n        }\n    };\n\n\n    //Si hay token, entendemos que se ha iniciado sesión sin cerrar y por tanto puede ir a la página de administración sin problema\n    if (tokenSesion) return <ArticlesListPage tokenSesion={tokenSesion}/>\n    getToken();\n\n\n    //Nos traemos el cuerpo de la respuesta, que es el nombre del usuario y lo ponemos como valor del token que dirá si tenemos la sesión abierta o no\n    const setToken = (cuerpoRespuesta) => {\n        setTokenSesion(cuerpoRespuesta);\n        sessionStorage.setItem('token', cuerpoRespuesta);\n\n    }\n\n\n    //Función para añadir un comentario\n    const login = async e => {\n        e.preventDefault();\n        //Lllamamos a la API por post y se le dice que el cuerpo es un JSON donde se pase\n        // el nombre de uusuario y el texto del comentario y se le indican las cabeceeras.\n        const result = await fetch(`/api/login`, {\n                method: 'post',\n                body: JSON.stringify({email: email, password: password}),\n                headers: {\n                    'Content-Type': 'application/json',\n                }\n            }\n        );\n        const cuerpoRespuesta = await result.json();\n\n        //Si el login es correcto que recibimos un status 200 ponemos el token y lo pasamos a la app por propiedades para\n        // que modifique la barra de navegación\n        if (result.status === 200) {\n            console.log(\"Token:\" + cuerpoRespuesta);\n            setToken(cuerpoRespuesta);\n            props.setTokenSesion();\n        } else {\n            setMensajeError(\"Usuario o contraseña introducidos incorrectos\")\n        }\n\n    };\n\n    return (\n        <div className={\"container\"}>\n        <form className={\"form-group\"} role={\"form\"} onSubmit={login}>\n            <h3>Inicio de sesión</h3>\n            <hr/>\n            <div className={\"form-group\"}>\n                <p className={\"danger text-danger\"}>{mensajeError}</p>\n                <label className={\"form-control-label\"} htmlFor={\"email\"}>\n                    Email:\n                </label>\n                    <input type={\"email\"} id={\"email\"}  className={\"form-control\"} name={\"email\"} placeholder={\"Introducir email\"}\n                           required value={email} onChange={(event => setEmail(event.target.value))}/>\n\n                <label className=\"form-control-label\" htmlFor={\"password\"}>\n                    Contraseña:\n                </label>\n                    <input type={\"text\"} id={\"password\"} className={\"form-control\"} name={\"password\"} value={password}\n                           type={\"password\"}\n                           placeholder={\"Introducir contraseña\"} required\n                           onChange={(event => setPassword(event.target.value))}/>\n            </div>\n            <input type={\"submit\"} className=\"btn btn-secondary\" value={\"Iniciar sesión\"}/>\n        </form>\n        </div>\n);\n}\nexport default Login;\n",
    "import React, {useEffect, useState} from 'react'\nimport {BiUserX, FaTimes} from \"react-icons/all\";\n\n//Función que recibe los comentarios como argumentos, nos recorremos con un map un array y acada posición del array la\n// pintamos con el nombre de usuario y el texto del comentario\nconst UsersList = (props) => {\n\n        const [usuarios, setUsuarios] = useState([]);\n\n\n\n        const borrarUsuario = async (emailUsuario) => {\n                console.log(emailUsuario)\n                        //Lllamamos a la API por post y se le dice que el cuerpo es un JSON donde se pase\n                        // el nombre de uusuario y el texto del comentario y se le indican las cabeceeras.\n                        const result = await fetch(`/api/borrarUsuario`, {\n                                    method: 'post',\n                                    body: JSON.stringify({\"email\": emailUsuario}),\n                                    headers: {\n                                            'Content-Type': 'application/json',\n                                    }\n                            }\n                        );\n\n                        if (result.status === 200) {\n                                console.log(\"Usuario \" + emailUsuario + \"borrado\");\n                                props.setUsuarioExito(\"Usuario borrado correctamente\")\n\n                        }\n\n        }\n\n\n        useEffect(() => {\n                //Creamos una función para traernos los datos ya que use effect no podemos hacerla async\n                const fetchDataUsers = async () => {\n                        //Nos traemos los datos llamando a la api y guardamos la respuesta\n                        const resultado  = await fetch(`/api/obtenenerTodosUsuarios`);\n                        //Como la respuesta incluye cosas como el código de respuesta y sólo queremos el cuerpo, la guardamos en un json\n                        const cuerpoRespuesta = await resultado.json();\n                        console.log(cuerpoRespuesta)\n                        setUsuarios(cuerpoRespuesta);\n                }\n                //Llamamos a la función que hemos creado\n                fetchDataUsers();\n        }, );\n\n        return (\n\n            <>\n                <div className={\"container\"}>\n                    <div className={\"align-content-center\"}>\n                    {usuarios.map((usuario, key) => (\n                        <div className=\"col media py-3\" key={key}>\n                                <div className=\"mr-3\">\n                                        <button className=\"btn btn-sm btn-danger\" aria-label={\"Borrar Usuario\"}\n                                                onClick={() => borrarUsuario(usuario.email)}>\n                                                {/*Importamos de la libreria react icons iconos para mejorar el aspecto de la web. En este caso la X*/}\n                                                <BiUserX/>\n                                        </button>\n\n                                </div>\n                            <div>\n                            <h4>{usuario.nombreUsuario}</h4>\n                                <p>{usuario.email}</p>\n                            </div>\n                        </div>\n\n                    ))}\n                    </div>\n                </div>\n            </>\n        );\n};\n\nexport default UsersList;\n",
    "import React, {useState} from 'react';\nimport UsersList from \"./UsersList\";\nimport NotFoundPage from \"../pages/NotFoundPage\";\nimport {FiUserPlus} from \"react-icons/all\";\n\n\n\nconst Users = (props) => {\n    const [username, setUsername] = useState('');\n    const [password, setPassword] = useState('');\n    const [email, setEmail] = useState('');\n    const [usuarioExito, setUsuarioExito] = useState('');\n\n\n    //Función para añadir un comentario\n    const addUsuario = async (e) => {\n        e.preventDefault();\n        //Lllamamos a la API por post y se le dice que el cuerpo es un JSON donde se pase\n        // el nombre de uusuario y el texto del comentario y se le indican las cabeceeras.\n        const result = await fetch(`/api/nuevoUsuario`, {\n            method: 'post',\n            body: JSON.stringify({nombre: username, email: email, password: password}),\n            headers: {\n                'Content-Type': 'application/json',\n            }\n        });\n\n        //El cuerpo es el resultado pasado a json.\n        const body = await result.json();\n        if (result.status === 200) {\n            //Se dejan en blanco nuevamente los campos del formulario y se saca mensaje de Exito\n            setUsuarioExito(\"Usuario dado de alta correctamente\");\n            setUsername('');\n            setPassword('');\n            setEmail('');\n        }\n\n    }\n    if (props.tokenSesion) {\n\n    return (\n\n        <div className={\"container\"}>\n            <form className={\"form-group\"} role={\"form\"}>\n                <h3>Creación de usuarios</h3>\n                <hr/>\n                <div className={\"form-group\"}>\n                    <p className={\"success text-success\"}>{usuarioExito}</p>\n                    <label className={\"form-control-label\"} htmlFor={\"nombre\"}>\n                        Nombre:\n\n                    <input id={\"nombre\"} className={\"form-control\"} type={\"text\"} value={username} required onChange={(event => setUsername(event.target.value))}/>\n                    </label>\n                    <label className={\"form-control-label\"} htmlFor={\"email\"}>\n                        Email:\n\n                    <input type={\"email\"} id={\"email\"}\n                              className={\"form-control\"}\n                              value={email}\n                              required\n                            onChange={(event => setEmail(event.target.value))}/>\n                    </label>\n                <label className={\"form-control-label\"} htmlFor={\"password\"}>\n                    Contraseña:\n\n                <input id={\"password\"} className={\"form-control\"} type={\"password\"} value={password} required onChange={(event => setPassword(event.target.value))}/>\n                </label>\n                </div>\n                <div className={\"btn btn-secondary\"} onClick={addUsuario}><FiUserPlus/> Añadir Usuario</div>\n            </form>\n\n            <hr/>\n            <h3>Lista de usuarios</h3>\n            <UsersList setUsuarioExito={setUsuarioExito}/>\n        </div>\n\n    );\n    } else {\n        return <NotFoundPage/>\n    }\n\n}\n\nexport default Users;\n",
    "import React, {useState} from 'react';\nimport NotFoundPage from \"../pages/NotFoundPage\";\n\n\n\n\nconst NuevoPost = (props) => {\n    const [titulo, setTitulo] = useState('');\n    const [texto, setTexto] = useState('');\n    const [usuarioExito, setUsuarioExito] = useState('');\n\n\n    //Función para añadir un comentario\n    const addPost = async (e) => {\n        e.preventDefault();\n        const nombrePost = titulo.replaceAll(\" \", \"-\");\n        const fecha = Date.now();\n        console.log(\"fecha\" + fecha + \"Y nombre post\" + nombrePost);\n        //Lllamamos a la API por post y se le dice que el cuerpo es un JSON donde se pase\n        // el nombre de uusuario y el texto del comentario y se le indican las cabeceeras.\n        const result = await fetch(`/api/articulos/nuevoArticulo`, {\n            method: 'post',\n            body: JSON.stringify({\n                nombre: nombrePost,\n                texto: texto,\n                titulo: titulo,\n                fechaCreacion: fecha,\n                autor: props.tokenSesion}),\n            headers: {\n                'Content-Type': 'application/json',\n            }\n        });\n\n        //El cuerpo es el resultado pasado a json.\n        const body = await result.json();\n        if (result.status === 200) {\n            //Se dejan en blanco nuevamente los campos del formulario y se saca mensaje de Exito\n            setUsuarioExito(\"Nuevo post subido correctamente\");\n            setTitulo('');\n            setTexto('');\n\n        }\n\n\n    }\n    if (props.tokenSesion) {\n\n    return (\n        <div className={\"container\"}>\n        <form className={\"form-group\"} role={\"form\"} onSubmit={addPost}>\n            <h3>Crear un nuevo post</h3>\n            <hr/>\n            <div className={\"form-group\"}><p className={\"success text-success\"}>{usuarioExito}</p>\n            <label className={\"form-control-label\"} htmlFor={\"nombre\"}>\n                Título:\n            </label>\n                <input id={\"nombre\"} className=\"form-control\" type={\"text\"} value={titulo}\n                       required onChange={(event => setTitulo(event.target.value))}/>\n\n            <label className=\"form-control-label\" htmlFor={\"textoPost\"}>\n                Texto:\n            </label>\n                <textarea id={\"textoPost\"}\n                       className={\"form-control\"}\n                       value={texto}\n                       required\n                       rows={\"5\"}\n                       cols={\"20\"}\n                       onChange={(event => setTexto(event.target.value))}/>\n            </div>\n            <input type={\"submit\"} className=\"btn btn-secondary\" value={\"Crear Post\"}/>\n\n        </form>\n        </div>\n\n    );\n    } else {\n        return <NotFoundPage/>\n    }\n\n}\n\nexport default NuevoPost;\n",
    "import React, {useEffect, useState} from 'react';\nimport ArticlesList from \"../components/ArticlesList\";\nimport ArticlesListAdmin from \"../components/ArticlesListAdmin\";\nimport NotFoundPage from \"./NotFoundPage\";\n\n\n\nconst ArticlesListPageAdmin = (props) =>  {\n\n//Usamos React Hooks. Definimos la información del articúlo, que va a coger la información del servidor.\n// SetArcileinfo es la información con la que vamos a poblar la info del partículo y el objeto vacío que pasamos como argumento es el valor inicial de esa articleinfo antes de cargar algún dato que cambie su estado.\n//Se puede poner un valor por defecto de las propiedades que esperamos recibir en el article info\n    const [todosArticulos, setTodosArticulos] = useState([]);\n\n//Añadimos los datos redicibidos por la llamada al back usando use effect, pasando params en blanco para que se pase como argumento cualquier cosa que nos llegue.\n//Useeffect se llama continuamente cada vez que el componente se actualiza y se llama en bucle infinito si se está actualizando continuamente, para eso hay que usar sus deps usando un array\n//Si el array es vacío sólo se carga cuando se carga el componente, sólo la primera vez cuando se carga el componente,\n// en este caso artículos. Para especificar que se cargue cada vez que cambie algo, tenemos que indicar en qué fijarse\n// dentro de ese array, en este caso nos interesa la url, que es la const name que hemos sacado de los parámetros de la URL\n//Usamos setArticleInfo y le indicamos los valores.\n    useEffect(() => {\n        //Creamos una función para traernos los datos ya que use effect no podemos hacerla async\n        const fetchData = async () => {\n            //Nos traemos los datos llamando a la api y guardamos la respuesta\n            const result  = await fetch(`/api/obtenerArticulos`);\n            //Como la respuesta incluye cosas como el código de respuesta y sólo queremos el cuerpo, la guardamos en un json\n            const responseBody = await result.json();\n            setTodosArticulos(responseBody);\n\n        }\n        //Llamamos a la función que hemos creado\n        fetchData();\n    }, []);\n\n\n        return (\n            //<> </> Shorthand de <react.Fragment> Poner dentro el contenido </react.Fragment>==> Envolvemos las líneas de código\n            // con <> para exportarlo sin tener que usar divs. De normal para exportar varios niveles se tiene que envolver en div\n            <>\n                <h1>Entradas del blog</h1>\n                {/*Llamamos al componente que muestra la lista de artículos y le mandamos el fichero con los artículos como parémtro  */}\n                <ArticlesList articulos={todosArticulos} tokenSesion={props.tokenSesion}/>\n            </>\n        )\n\n};\n\n\nexport default ArticlesListPageAdmin;\n\n",
    "//Importamos router para traernos las dependencias de la navegación\nimport {BrowserRouter as Router, Route, Switch} from 'react-router-dom';\nimport './App.css';\nimport HomePage from \"./pages/HomePage\";\nimport AboutPage from \"./pages/AboutPage\";\nimport ArticlesListPage from \"./pages/ArticlesListPage\";\nimport NavBar from \"./NavBar\";\nimport NotFoundPage from \"./pages/NotFoundPage\";\nimport PaginaArticulo from \"./pages/PaginaArticulo\";\nimport Login from \"./components/Login\";\nimport React, {useEffect, useState} from \"react\";\nimport Users from \"./components/Users\";\nimport NuevoPost from \"./components/NuevoPost\";\nimport ArticlesListPageAdmin from \"./pages/ArticlesListPageAdmin\";\n\n\nfunction App() {\n    //Creamos una constante para el token y el set token que nos comprueba si la sesión está abierta\n    const [tokenSesion, setTokenSesion] = useState(null);\n\n    //Monitorizamos cada vez que el toquen de la sesión cambie y lo cogemos de la sesión del navegador de session storage\n    useEffect(() => {\n        const getToken = () => {\n            if (sessionStorage.getItem('token')) {\n                const tokenString = sessionStorage.getItem('token');\n                setTokenSesion(tokenString);\n            }\n        };\n        getToken();\n        console.log(\"Usuario logado\" + tokenSesion);\n    }, [tokenSesion]);\n\n    //Función para cerrar la sesión desde el session storage del navegador y poner el token de la sesión a null.\n    // Esta función la pasamos a la navBar\n    const cerrarSesion = () => {\n        sessionStorage.clear();\n        setTokenSesion(null);\n    };\n\n    return (\n        <main className=\"page bg-white\" id=\"petratings\">\n\n{/*        //Envolvemos el código dentro del router component\n        //Article:name --> Aquí recogemos el parámetro de la URL para poderlo utilizar en la página en cuestión*/}\n        <Router>\n            <div className=\"App\">\n                {/*Cargamos el componente de la barra de navegación encima del cuerpo de la página ya que queremos que se cargue en todas las páginas*/}\n                <NavBar tokenSesion={tokenSesion} cerrarSesion={cerrarSesion}/>\n                <div id=\"page-body\">\n\n                    {/*Usamos Switch para decirle que una vez encuentre uno de los path no siga mostrando los siguientes. Aquí es importante el orden.*/}\n                    <Switch>\n                        {/*Le decimos que la home debe abrir el componente de hompage usando exact le decimos que sólo queremos que cargue\n      el componente cuando sea esa ruta y si no, que no cargue nada. */}\n                        <Route path=\"/\" component={HomePage} exact/>\n                        <Route path=\"/about\" component={AboutPage} exact/>\n                        <Route\n                            path=\"/articles-list\"\n                            component={() => <ArticlesListPage tokenSesion={tokenSesion}/>}\n                            exact/>\n                        {/*Usamos :name donde pasamos un parámetro en el navegador que se pasa al componente*/}\n                        <Route path=\"/articulo/:nombre\" component={PaginaArticulo}/>\n                        {/*      Pasamos como componente la función de set token para que nos vuelva a la App el token en cuanto iniciemos sesión. De esta forma capturamos el estado de la sesión\n      lo pasamos a la barra de navegación como props en el caso que no estuviera el usuario logado.    */}\n                        <Route path=\"/admin\" component={() => <Login setTokenSesion={setTokenSesion}/>}/>\n                        <Route path=\"/users\" component={() => <Users tokenSesion={tokenSesion}/>}/>\n                        <Route path=\"/gestionarPost\"\n                               component={() => <ArticlesListPageAdmin tokenSesion={tokenSesion}/>}/>\n                        <Route path=\"/nuevoPost\" component={() => <NuevoPost tokenSesion={tokenSesion}/>}/>\n                        <Route component={NotFoundPage}/>\n                    </Switch>\n                </div>\n            </div>\n        </Router>\n        </main>\n    );\n}\n\nexport default App;\n",
    "const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n",
    "import 'whatwg-fetch';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport 'bootstrap';\nimport 'jquery/src/jquery';\nimport 'popper.js/dist/popper';\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"
  ],
  "sourceRoot": ""
}
