{"version":3,"sources":["logo.svg","pages/HomePage.js","pages/AboutPage.js","pages/articleContent.js","components/ArticlesList.js","pages/ArticlesListPage.js","pages/NotFoundPage.js","components/CommentsList.js","components/SeccionVotos.js","components/AddComentarioForm.js","pages/ArticlePage.js","NavBar.js","App.js","reportWebVitals.js","index.js"],"names":["HomePage","AboutPage","articles","name","title","content","ArticlesList","map","article","key","className","to","substring","ArticlesListPage","articleContent","NotFoundPage","CommentsList","comentarios","comentario","username","text","SeccionVotos","nombreArticulo","votos","setInfoArticulo","votarArticulo","a","fetch","method","result","json","body","id","onClick","AddComentarioForm","useState","setUsername","commentText","setCommentText","addComment","JSON","stringify","headers","type","value","onChange","event","target","rows","cols","ArticlePage","match","params","find","articleInfo","setArticleInfo","useEffect","responseBody","fetchData","otherArticles","filter","paragraph","NavBar","App","path","component","exact","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.337dad76.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","import React from 'react';\n\nconst HomePage = () => (\n    //<> </> Shorthand de <react.Fragment> Poner dentro el contenido </react.Fragment>==> Envolvemos las líneas de código\n    // con <> para exportarlo sin tener que usar divs. De normal para exportar varios niveles se tiene que envolver en div\n    <>\n        <h1>Hola, Bienvenid@ al Blog</h1>\n        <p>Texto</p>\n        <p>Texto</p>\n        <p>Texto</p>\n    </>\n);\n\nexport default HomePage;\n","import React from 'react';\n\n\nconst AboutPage = () => (\n    <>\n        <h1>Sobre mi</h1>\n        <p>Texto</p>\n        <p>Texto</p>\n        <p>Texto</p>\n    </>\n);\n\nexport default AboutPage;\n","const articles = [\n    {\n        name: 'learn-react',\n        title: 'Cómo programar desde cero con react',\n        content: [\n            `Bienvenido, hoy vamos a ver como programar desde cero si no sabes nada de programación. \n            Lo más importante es Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nullam fringilla \n            ante in eros vulputate ornare. Sed aliquet felis ut justo blandit elementum. Maecenas vitae risus \n            efficitur, vulputate nunc non, tempus metus. Donec sed magna congue, pretium lacus eget, placerat quam. \n            Fusce augue arcu, aliquet eu convallis efficitur, vestibulum et magna. Nunc in nulla \n            elementum, faucibus purus id, mollis purus. Maecenas commodo fringilla varius. Mauris aliquam, \n            lorem ut feugiat euismod, turpis odio suscipit turpis, in aliquam velit tortor a enim. \n            Phasellus egestas, leo in rhoncus gravida, urna quam condimentum neque, ut efficitur justo eros eu elit. \n            Morbi volutpat purus efficitur risus condimentum tristique. Nullam dignissim nec ipsum nec viverra. \n            Donec ut libero dignissim, vestibulum enim id, iaculis mauris. Vestibulum ante ipsum \n            primis in faucibus orci luctus et ultrices posuere cubilia curae; Nam rhoncus diam ac \n            purus sodales bibendum. Donec sit amet vulputate leo, rhoncus rhoncus diam. Quisque \n            luctus est sapien, vel pellentesque erat sodales et.`,\n            `Phasellus vestibulum ante augue, id ultricies neque dictum ut. Morbi congue sollicitudin \n            justo, aliquam tincidunt quam ultricies vitae. Morbi ultrices volutpat ultricies. Duis \n            dignissim tellus vitae pulvinar ultrices. Donec ac egestas turpis. Donec et neque suscipit, \n            blandit nisi vitae, dignissim metus. Morbi porttitor enim vel nibh consectetur suscipit.`,\n            `Lorem ipsum dolor sit amet, consectetur adipiscing elit. Etiam efficitur enim id neque \n            blandit, vel interdum tellus gravida. Duis vitae tortor at ligula sollicitudin lacinia nec \n            non turpis. Phasellus facilisis nec dui condimentum auctor. Donec ullamcorper sit amet lacus\n             a viverra. Vivamus et laoreet purus. Morbi ultricies nulla nec mauris tincidunt, ornare \n             dictum nulla congue. Nunc id augue non erat consectetur bibendum ac vel enim. Praesent \n             congue posuere tristique. Nullam massa massa, faucibus sed velit a, dignissim tempor massa.`,\n        ]\n    },    {\n        name: 'learn-node',\n        title: 'Aprende a montar un servidor node rápido y sencillo',\n        content: [\n            `Ahora vamos a hablar de cómo montar un servidor node en local para que te entretengas\n            y pases el rato programando en esos momentos de aburrimiento donde la única alternativa\n            es jugar a la Play. Phasellus in risus tincidunt nisl ullamcorper egestas. Curabitur \n            turpis magna, faucibus sed sapien sed, consequat posuere tortor. Integer sed nisl neque. \n            Suspendisse consectetur ex vel sem venenatis dictum vel in lectus. Vestibulum et purus \n            vel nunc ultricies varius. Cras congue aliquam tortor, nec egestas felis vulputate non. \n            Etiam rhoncus sapien dignissim arcu convallis pharetra. Praesent scelerisque sapien leo, \n            ut euismod quam pulvinar eu.`,\n            `Phasellus vestibulum ante augue, id ultricies neque dictum ut. Morbi congue sollicitudin \n            justo, aliquam tincidunt quam ultricies vitae. Morbi ultrices volutpat ultricies. Duis \n            dignissim tellus vitae pulvinar ultrices. Donec ac egestas turpis. Donec et neque suscipit, \n            blandit nisi vitae, dignissim metus. Morbi porttitor enim vel nibh consectetur suscipit.`,\n            `Lorem ipsum dolor sit amet, consectetur adipiscing elit. Etiam efficitur enim id neque \n            blandit, vel interdum tellus gravida. Duis vitae tortor at ligula sollicitudin lacinia nec \n            non turpis. Phasellus facilisis nec dui condimentum auctor. Donec ullamcorper sit amet lacus\n             a viverra. Vivamus et laoreet purus. Morbi ultricies nulla nec mauris tincidunt, ornare \n             dictum nulla congue. Nunc id augue non erat consectetur bibendum ac vel enim. Praesent \n             congue posuere tristique. Nullam massa massa, faucibus sed velit a, dignissim tempor massa.`,\n        ]\n    },     {\n        name: 'my-thoughts-on-resumes',\n        title: 'El curriculum a muerto, bienvenida la época de los portfolios y github',\n        content: [\n            `La gente cada vez usa menos un CV y se dispone a demostrar lo que vale en un \n            mercado cada vez más agresivo donde por fin parece que el saber es lo que importa\n            y no tanto la titulits. Interdum et malesuada fames ac ante ipsum primis in faucibus. \n            Aenean eget quam feugiat nulla placerat interdum. Donec vitae auctor tortor. \n            Vestibulum in libero sed est pharetra pretium. Nulla mattis semper odio, sed tempus diam pretium quis`,\n            `Phasellus vestibulum ante augue, id ultricies neque dictum ut. Morbi congue sollicitudin \n            justo, aliquam tincidunt quam ultricies vitae. Morbi ultrices volutpat ultricies. Duis \n            dignissim tellus vitae pulvinar ultrices. Donec ac egestas turpis. Donec et neque suscipit, \n            blandit nisi vitae, dignissim metus. Morbi porttitor enim vel nibh consectetur suscipit.`,\n            `Integer volutpat ipsum non orci efficitur, non ornare orci elementum. Mauris maximus eu elit\n             et imperdiet. Morbi sed vestibulum nisl, vitae consequat sapien. Praesent vel justo sit amet \n             tellus mollis ornare. Suspendisse non vehicula velit. Quisque laoreet at nunc ac porta. Nulla \n             consequat interdum auctor. Fusce fermentum velit ac quam tincidunt semper`,\n        ]\n    },\n];\n\nexport default articles;\n","import React from 'react';\nimport {Link} from \"react-router-dom\";\n\n//Nos traemos como parámetro la lista de artículos que nos manda desde la página de article list.\nconst ArticlesList = ({articles}) => (\n\n<>\n    {/*\n        //Hacemos un map del array de artículos para sacar su título. Y Después usamos el Rotuer de React para crear\n        los links que dirigan a cada artículo\n*/}\n    {articles.map((article, key) => (\n        <Link className={\"article-list-item\"} key={key} to={`/article/${article.name}`} >\n            <h3>{article.title}</h3>\n            <p>{article.content[0].substring(0,150)}...</p>\n        </Link>\n    ))}\n</>\n);\nexport default ArticlesList;\n","import React from 'react';\nimport articleContent from './articleContent';\nimport ArticlesList from \"../components/ArticlesList\";\n\n\nconst ArticlesListPage = () => (\n    //<> </> Shorthand de <react.Fragment> Poner dentro el contenido </react.Fragment>==> Envolvemos las líneas de código\n    // con <> para exportarlo sin tener que usar divs. De normal para exportar varios niveles se tiene que envolver en div\n    <>\n        <h1>Entradas del blog</h1>\n        {/*Llamamos al componente que muestra la lista de artículos y le mandamos el fichero con los artículos como parémtro*/}\n            <ArticlesList articles={articleContent}/>\n    </>\n);\n\nexport default ArticlesListPage;\n","import React from 'react';\n\nconst NotFoundPage = () => (\n<h1>404: Página no encontrada</h1>\n);\n\nexport default NotFoundPage;\n","import React from 'react'\n\n//Función que recibe los comentarios como argumentos, nos recorremos con un map un array y acada posición del array la\n// pintamos con el nombre de usuario y el texto del comentario\nconst CommentsList = ({comentarios}) => (\n<>\n    {comentarios.map((comentario, key) => (\n        <div className={\"comment\"} key={key}>\n            <h4>{comentario.username}</h4>\n            <p>{comentario.text}</p>\n        </div>\n        ))}\n</>\n        );\n\nexport default CommentsList;\n","import React from 'react';\n\n//El componente como parámetros el nombre del artículo (sacado de la URL params), votos sacado de la info del artículo\n// de la página del artículo y pasamos otro param que nos servirá para albergar los datos del body de la request\nconst SeccionVotos = ({nombreArticulo, votos, setInfoArticulo}) => {\n\n    //Hacemos una llamada post para incrementar el número de me votos de cada artículo cogiendo el nombre del artículo\n const votarArticulo = async () => {\n     const result = await fetch(`/api/articles/${nombreArticulo}/votar`, {\n         method: 'post',\n     })\n     //Cogemos el cuerpo de la respuesta pasado a JSON\n     const body = await result.json();\n     //Ponemos la infor del artículo como el cuerpo de la respuesta\n     setInfoArticulo(body);\n }\n    //Devolvemos un botón para que llame a la función me gusta cuando se le haga click y mostramos los votos del artículo\n    return (\n        <div id={'upvotes-section'}>\n        <button onClick={() => votarArticulo()}>Me gusta</button>\n        {/*Mostramos los datos del artículo*/}\n        <p>Este artículo ha recibiddo {votos} votos</p>\n        </div>\n        );\n};\n\nexport default SeccionVotos;\n","import React, {useState} from 'react';\n\nconst AddComentarioForm = ({nombreArticulo, setInfoArticulo}) => {\n    const [username, setUsername] = useState('');\n    const [commentText, setCommentText] = useState('');\n\n    const addComment = async () => {\n        const result = await fetch(`/api/articles/${nombreArticulo}/comentar`, {\n            method: 'post',\n            body: JSON.stringify({username, text: commentText}),\n            headers: {\n                'Content-Type': 'application/json',\n            }\n        });\n\n        const body = await result.json();\n        setInfoArticulo(body);\n        setUsername('');\n        setCommentText('');\n    }\n\n    return (\n        <div id={\"add-comment-form\"}>\n            <h3>Añadir un comentario</h3>\n            <label>\n                Nombre:\n                <input type={\"text\"} value={username} onChange={(event => setUsername(event.target.value))}/>\n            </label>\n            <label>\n                Comentario:\n                <textarea rows={\"4\"} cols={\"50\"} value={commentText}\n                          onChange={(event => setCommentText(event.target.value))}/>\n            </label>\n            <button onClick={() => addComment()}>Enviar comentario</button>\n        </div>\n\n    );\n}\n\nexport default AddComentarioForm;\n","import React, {useState, useEffect} from 'react';\nimport articleContent from './articleContent';\nimport ArticlesList from \"../components/ArticlesList\";\nimport NotFoundPage from \"./NotFoundPage\";\nimport CommentsList from \"../components/CommentsList\";\nimport SeccionVotos from \"../components/SeccionVotos\";\nimport AddComentarioForm from \"../components/AddComentarioForm\";\n\n\n//Campturamos el valor que nos viene en el parámetro de la URL\nconst ArticlePage = ({match}) => {\n    const name = match.params.name;\n    const article = articleContent.find(article => article.name === name);\n\n    //Usamos React Hooks. Definimos la información del articúlo, que va a coger la información del servidor.\n    // SetArcileinfo es la información con la que vamos a poblar la info del partículo y el objeto vacío que pasamos como argumento es el valor inicial de esa articleinfo antes de cargar algún dato que cambie su estado.\n    //Se puede poner un valor por defecto de las propiedades que esperamos recibir en el article info\n    const [articleInfo, setArticleInfo] = useState({ votos: 0, comentarios: []});\n\n    //Añadimos los datos redicibidos por la llamada al back usando use effect, pasando params en blanco para que se pase como argumento cualquier cosa que nos llegue.\n    //Useeffect se llama continuamente cada vez que el componente se actualiza y se llama en bucle infinito si se está actualizando continuamente, para eso hay que usar sus deps usando un array\n    //Si el array es vacío sólo se carga cuando se carga el componente, sólo la primera vez cuando se carga el componente,\n    // en este caso artículos. Para especificar que se cargue cada vez que cambie algo, tenemos que indicar en qué fijarse\n    // dentro de ese array, en este caso nos interesa la url, que es la const name que hemos sacado de los parámetros de la URL\n    //Usamos setArticleInfo y le indicamos los valores.\n    useEffect(() => {\n        //Creamos una función para traernos los datos ya que use effect no podemos hacerla async\n        const fetchData = async () => {\n            //Nos traemos los datos llamando a la api y guardamos la respuesta\n            const result  = await fetch(`/api/articles/${name}`);\n            //Como la respuesta incluye cosas como el código de respuesta y sólo queremos el cuerpo, la guardamos en un json\n            const responseBody = await result.json();\n            setArticleInfo(responseBody);\n        }\n        //Llamamos a la función que hemos creado\n        fetchData();\n    }, [name]);\n\n    if (!article) return <NotFoundPage/>\n\n    const otherArticles = articleContent.filter( article => article.name !== name);\n\n    return (\n    //<> </> Shorthand de <react.Fragment> Poner dentro el contenido </react.Fragment>==> Envolvemos las líneas de código\n    // con <> para exportarlo sin tener que usar divs. De normal para exportar varios niveles se tiene que envolver en div\n    <>\n        <h1>{article.title}</h1>\n        <SeccionVotos nombreArticulo={name} votos={articleInfo.votos} setInfoArticulo={setArticleInfo}/>\n\n{/*       Cada párrafo del artículo es una posición del array que contiene el artículo completo. Para sacar los paárrafos hacemos un map.\n        we're going to want to map our article's content property, which is a bunch of strings representing paragraphs,\n        to a bunch of JSX elements. And that'll look like this. .map(paragraph, and we'll put two paragraph tags and put\n        the paragraph string in between it. and put the paragraph string in between it. And since React wants us to assign\n        a key prop to our elements whenever we use map, we just have to add a key argument to our map function. And then\n        we add that key prop to the paragraph elements here.*/}\n\n        {article.content.map((paragraph, key) => (\n            <p key={key}>{paragraph}</p>\n            )\n        )}\n\n    {/*Cargamos el componente de los comentarios pasando como argumento los comentarios sacados de la info del artículo que hemos cogido de la bd*/}\n        <CommentsList comentarios={articleInfo.comentarios}/>\n        <AddComentarioForm nombreArticulo={name} setInfoArticulo={setArticleInfo} />\n        <h3>Otros artículos:</h3>\n        <ArticlesList articles={otherArticles} />\n    </>\n    );\n};\n\nexport default ArticlePage;\n","import React from 'react';\n//Importamos link para hacer los links en vez de con la etiqueta anchor de HTML\nimport {Link} from \"react-router-dom\";\n\n\nconst NavBar = () => (\n<nav>\n    <ul>\n        <li>\n            <Link to=\"/\">Home</Link>\n        </li>\n        <li>\n            <Link to=\"/about\">Sobre mi</Link>\n        </li>\n        <li>\n            <Link to=\"/articles-list\">Entradas del blog</Link>\n        </li>\n    </ul>\n</nav>\n);\n\nexport default NavBar;\n\n\n\n","import logo from './logo.svg';\n//Importamos router para traernos las dependencias de la navegación\nimport {BrowserRouter as Router,\n        Route,\n    Switch\n} from 'react-router-dom';\nimport './App.css';\nimport HomePage from \"./pages/HomePage\";\nimport AboutPage from \"./pages/AboutPage\";\nimport ArticlesListPage from \"./pages/ArticlesListPage\";\nimport ArticlePage from \"./pages/ArticlePage\";\nimport NavBar from \"./NavBar\";\nimport NotFoundPage from \"./pages/NotFoundPage\";\n\nfunction App() {\n  return (\n      //Envolvemos el código dentro del router component\n      //Article:name --> Aquí recogemos el parámetro de la URL para poderlo utilizar en la página en cuestión\n      <Router>\n    <div className=\"App\">\n      {/*Cargamos el componente de la barra de navegación encima del cuerpo de la página ya que queremos que se cargue en todas las páginas*/}\n      <NavBar/>\n      <div id=\"page-body\">\n\n    {/*Usamos Switch para decirle que una vez encuentre uno de los path no siga mostrando los siguientes. Aquí es importante el orden.*/}\n     <Switch>\n       {/*Le decimos que la home debe abrir el componente de hompage usando exact le decimos que sólo queremos que cargue\n      el componente cuando sea esa ruta y si no, que no cargue nada. */}\n      <Route path = \"/\" component={HomePage} exact/>\n      <Route path= \"/about\" component={AboutPage} exact/>\n      <Route path=\"/articles-list\" component={ArticlesListPage} exact />\n      {/*Usamos :name donde pasamos un parámetro en el navegador que se pasa al componente*/}\n      <Route path=\"/article/:name\" component={ArticlePage}  />\n      <Route component={NotFoundPage}/>\n     </Switch>\n      </div>\n    </div>\n      </Router>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import 'whatwg-fetch';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}